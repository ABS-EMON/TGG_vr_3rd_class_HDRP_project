// Made with Amplify Shader Editor v1.9.8.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit (Lite)"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector] _motion_highlight_color( "_motion_highlight_color", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _IsVersion( "_IsVersion", Float ) = 2070
		[HideInInspector] _IsTVEShader( "_IsTVEShader", Float ) = 1
		[HideInInspector] _IsShared( "_IsShared", Float ) = 0
		[HideInInspector] _IsIdentifier( "_IsIdentifier", Float ) = 0
		[HideInInspector] _IsCollected( "_IsCollected", Float ) = 0
		[HideInInspector] _IsConverted( "_IsConverted", Float ) = 0
		[HideInInspector] _IsCustomShader( "_IsCustomShader", Float ) = 0
		[HideInInspector] _MainTex( "Legacy MainTex", 2D ) = "white" {}
		[HideInInspector] _BumpMap( "Legacy BumpMap", 2D ) = "white" {}
		[HideInInspector] _Cutoff( "Legacy Cutoff", Float ) = 0.5
		[HideInInspector] _Color( "Legacy Color", Color ) = ( 0, 0, 0, 0 )
		[StyledCategory(Render Settings, true, 0, 10)] _RenderCategory( "[ Render Category ]", Float ) = 1
		[Enum(Opaque,0,Transparent,1)] _RenderMode( "Render Mode", Float ) = 0
		[Enum(Off,0,On,1)] _RenderZWrite( "Render ZWrite", Float ) = 1
		[Enum(Both,0,Back,1,Front,2)] _RenderCull( "Render Faces", Float ) = 2
		[HideInInspector] _render_normal( "_render_normal", Vector ) = ( 1, 1, 1, 0 )
		[HideInInspector] _RenderQueue( "Render Queue", Float ) = 0
		[HideInInspector] _RenderPriority( "Render Priority", Float ) = 0
		[HideInInspector] _RenderBakeGI( "Render BakeGI", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSSR( "Render SSR", Float ) = 0
		[Enum(Off,0,On,1)] _RenderDecals( "Render Decals", Float ) = 0
		[Enum(Auto,0,Off,1,On,2)] _RenderMotion( "Render Motion", Float ) = 0
		[Enum(Flip,0,Mirror,1,Same,2)] _RenderNormal( "Render Normals", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSpecular( "Render Specular", Float ) = 1
		[Enum(Off,0,On,1)] _RenderShadow( "Render Shadows", Float ) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)] _RenderFilter( "Render Filtering", Float ) = 0
		[Enum(Off,0,On,1)] _RenderClip( "Render Clipping", Float ) = 0
		[StyledSpace(10)] _RenderEnd( "[ Render End ]", Float ) = 1
		[HideInInspector] _NoiseTex3D( "Noise Mask 3D", 3D ) = "white" {}
		[HideInInspector] _NoiseTexSS( "Noise Mask SS", 2D ) = "white" {}
		[StyledCategory(Object Settings, true, 0, 10)] _ObjectCategory( "[ Object Category ]", Float ) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)] _ObjectBoundsInfo( "# ObjectBoundsInfo", Float ) = 0
		[Enum(Legacy,0,Standard,1)] _ObjectModelMode( "Object Model Mode", Float ) = 1
		[Enum(Off,0,Baked,1,Procedural,2)] _ObjectPivotMode( "Object Pivots Mode", Float ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ObjectPhaseMode( "Object Phase Mask", Float ) = 0
		_ObjectHeightValue( "Object Height Value", Range( 0, 40 ) ) = 1
		_ObjectRadiusValue( "Object Radius Value", Range( 0, 40 ) ) = 1
		[HideInInspector] _object_phase_mode( "_object_phase_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _ObjectEnd( "[ Object End ]", Float ) = 1
		[StyledCategory(Global Settings, true, 0, 10)] _GlobalCategory( "[ Global Category ]", Float ) = 1
		[StyledMessage(Warning, Global Elements and Layers are only available with The Visual Engine Core package., 0, 0)] _GlobalLiteInfo( "# Global Lite Info", Float ) = 0
		[StyledSpace(10)] _GlobalEnd( "[ Global End ]", Float ) = 1
		[StyledCategory(Main Settings, true, 0, 10)] _MainCategory( "[Main Category ]", Float ) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)] _MainMultiMaskInfo( "# MainMultiMaskInfo", Float ) = 0
		[StyledTextureSingleLine] _MainAlbedoTex( "Main Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _MainNormalTex( "Main Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _MainShaderTex( "Main Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _MainSampleMode( "Main Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _MainCoordMode( "Main UV Mode", Float ) = 0
		[StyledVector(9)] _MainCoordValue( "Main UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _main_coord_value( "_main_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _MainColorMode( "Main Color", Float ) = 0
		[HDR] _MainColor( "Main Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _MainColorTwo( "Main ColorB", Color ) = ( 1, 1, 1, 1 )
		_MainAlphaClipValue( "Main Alpha", Range( 0, 1 ) ) = 0.5
		_MainAlbedoValue( "Main Albedo", Range( 0, 1 ) ) = 1
		_MainNormalValue( "Main Normal", Range( -8, 8 ) ) = 1
		_MainMetallicValue( "Main Metallic", Range( 0, 1 ) ) = 0
		_MainOcclusionValue( "Main Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainOcclusionRemap( "Main Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _MainMultiRemap( "Main Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_MainSmoothnessValue( "Main Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainSmoothnessRemap( "Main Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _MainEnd( "[Main End ]", Float ) = 1
		[StyledCategory(Layer Settings, true, 0, 10)] _LayerCategory( "[ Layer Category ]", Float ) = 1
		_SecondIntensityValue( "Layer Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _SecondBakeMode( "Layer Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _SecondAlbedoTex( "Layer Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _SecondNormalTex( "Layer Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _SecondShaderTex( "Layer Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _SecondSampleMode( "Layer Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondCoordMode( "Layer UV Mode", Float ) = 0
		[StyledVector(9)] _SecondCoordValue( "Layer UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _SecondColorMode( "Layer Color", Float ) = 0
		[HDR] _SecondColor( "Layer Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _SecondColorTwo( "Layer ColorB", Color ) = ( 1, 1, 1, 1 )
		_SecondAlphaClipValue( "Layer Alpha", Range( 0, 1 ) ) = 0.5
		_SecondAlbedoValue( "Layer Albedo", Range( 0, 1 ) ) = 1
		_SecondNormalValue( "Layer Normal", Range( -8, 8 ) ) = 1
		_SecondMetallicValue( "Layer Metallic", Range( 0, 1 ) ) = 0
		_SecondOcclusionValue( "Layer Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondOcclusionRemap( "Layer Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondMultiRemap( "Layer Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_SecondSmoothnessValue( "Layer Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondSmoothnessRemap( "Layer Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _SecondBlendIntensityValue( "Layer Blend Intensity", Range( 0, 1 ) ) = 1
		_SecondBlendAlbedoValue( "Layer Blend Albedos", Range( 0, 1 ) ) = 0
		_SecondBlendNormalValue( "Layer Blend Normals", Range( 0, 1 ) ) = 0
		_SecondBlendShaderValue( "Layer Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _SecondMaskTex( "Layer Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _SecondMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _SecondMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_SecondGlobalValue( "Layer Coat Mask", Range( 0, 1 ) ) = 1
		_SecondMaskValue( "Layer TexB Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _SecondMaskRemap( "Layer TexB Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondLumaValue( "Layer Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondLumaRemap( "Layer Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondProjValue( "Layer ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondProjRemap( "Layer ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondMeshValue( "Layer Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _SecondMeshMode( "Layer Mesh Mask", Float ) = 2
		[StyledRemapSlider] _SecondMeshRemap( "Layer Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondBlendRemap( "Layer Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _LayerEnd( "[ Layer End ]", Float ) = 1
		[HideInInspector] _second_coord_value( "_second_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _second_vert_mode( "_second_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _second_mask_coord_value( "_second_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Detail Settings, true, 0, 10)] _DetailCategory( "[ Detail Category ]", Float ) = 1
		_ThirdIntensityValue( "Detail Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _ThirdBakeMode( "Detail Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _ThirdAlbedoTex( "Detail Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _ThirdNormalTex( "Detail Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _ThirdShaderTex( "Detail Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _ThirdSampleMode( "Detail Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdCoordMode( "Detail UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdCoordValue( "Detail UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _ThirdColorMode( "Detail Color", Float ) = 0
		[HDR] _ThirdColor( "Detail Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _ThirdColorTwo( "Detail ColorB", Color ) = ( 1, 1, 1, 1 )
		_ThirdAlphaClipValue( "Detail Alpha", Range( 0, 1 ) ) = 0.5
		_ThirdAlbedoValue( "Detail Albedo", Range( 0, 1 ) ) = 1
		_ThirdNormalValue( "Detail Normal", Range( -8, 8 ) ) = 1
		_ThirdMetallicValue( "Detail Metallic", Range( 0, 1 ) ) = 0
		_ThirdOcclusionValue( "Detail Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdOcclusionRemap( "Detail Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdMultiRemap( "Detail Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_ThirdSmoothnessValue( "Detail Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdSmoothnessRemap( "Detail Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _ThirdBlendIntensityValue( "Detail Blend Intensity", Range( 0, 1 ) ) = 1
		_ThirdBlendAlbedoValue( "Detail Blend Albedos", Range( 0, 1 ) ) = 0
		_ThirdBlendNormalValue( "Detail Blend Normals", Range( 0, 1 ) ) = 0
		_ThirdBlendShaderValue( "Detail Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _ThirdMaskTex( "Detail Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _ThirdMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_ThirdGlobalValue( "Detail Coat Mask", Range( 0, 1 ) ) = 1
		_ThirdMaskValue( "Detail TexG Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _ThirdMaskRemap( "Detail TexG Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdLumaValue( "Detail Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdLumaRemap( "Detail Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdProjValue( "Detail ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdProjRemap( "Detail ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdMeshValue( "Detail Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ThirdMeshMode( "Detail Mesh Mask", Float ) = 1
		[StyledRemapSlider] _ThirdMeshRemap( "Detail Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdBlendRemap( "Detail Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[HideInInspector] _third_coord_value( "_third_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _third_vert_mode( "_third_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _third_mask_coord_value( "_third_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _DetailEnd( "[ Detail End ]", Float ) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)] _OcclusionCategory( "[ Occlusion Category ]", Float ) = 1
		_OcclusionIntensityValue( "Occlusion Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OcclusionBakeMode( "Occlusion Baking", Float ) = 1
		[HDR] _OcclusionColorOne( "Occlusion ColorA", Color ) = ( 1, 1, 1, 1 )
		[HDR] _OcclusionColorTwo( "Occlusion ColorB", Color ) = ( 0.25, 0.25, 0.25, 1 )
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)] _OcclusionMeshMode( "Occlusion Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OcclusionMeshRemap( "Occlusion Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _OcclusionEnd( "[ Occlusion End ]", Float ) = 1
		[HideInInspector] _occlusion_vert_mode( "_occlusion_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Gradient Settings, true, 0, 10)] _GradientCategory( "[ Gradient Category ]", Float ) = 1
		_GradientIntensityValue( "Gradient Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _GradientBakeMode( "Gradient Baking", Float ) = 1
		[HDR] _GradientColorOne( "Gradient ColorA", Color ) = ( 1, 0.6135602, 0, 1 )
		[HDR] _GradientColorTwo( "Gradient ColorB", Color ) = ( 0.754717, 0.0389044, 0.03203986, 1 )
		[Space(10)] _GradientMultiValue( "Gradient Multi Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _GradientMeshMode( "Gradient Mesh Mask", Float ) = 3
		[StyledRemapSlider] _GradientMeshRemap( "Gradient Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _GradientEnd( "[ Gradient End ]", Float ) = 1
		[HideInInspector] _gradient_vert_mode( "_gradient_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Variation Settings, true, 0, 10)] _VariationCategory( "[ Variation Category ]", Float ) = 1
		[StyledMessage(Warning, The Variation feature is only available with The Visual Engine Core package., 0, 10)] _VariationLiteInfo( "# Variation Lite Info", Float ) = 0
		[StyledColoring] _VariationColoring( "# Variation Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_VariationIntensityValue( "Variation Intensity", Range( 0, 1 ) ) = 0
		[HDR] _VariationColorOne( "Variation ColorA", Color ) = ( 0.4573758, 0.6226415, 0.2144001, 1 )
		[HDR] _VariationColorTwo( "Variation ColorB", Color ) = ( 0.7450981, 0.5238863, 0.1098039, 1 )
		[Space(10)] _VariationMultiValue( "Variation Multi Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _VariationNoiseRemap( "Variation Noise Mask", Vector ) = ( 0, 1, 0, 0 )
		_VariationNoiseTillingValue( "Variation Noise Tilling", Range( 0, 100 ) ) = 10
		_VariationNoisePivotsValue1( "Variation Noise Pivots", Range( 0, 1 ) ) = 0
		[StyledSpace(10)] _VariationEnd( "[ Variation End ]", Float ) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)] _TintingCategory( "[ Tinting Category ]", Float ) = 1
		[StyledMessage(Warning, The Tinting feature is only available with The Visual Engine Core package., 0, 10)] _TintingLiteInfo( "# Tinting Lite Info", Float ) = 0
		[StyledColoring] _TintingColoring( "# Tinting Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_TintingIntensityValue( "Tinting Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _TintingBakeMode( "Tinting Baking", Float ) = 0
		_TintingGrayValue( "Tinting Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _TintingColor( "Tinting Color", Color ) = ( 1, 1, 1, 1 )
		[StyledSpace(10)] _TintingSpace( "[ Tinting Space ]", Float ) = 1
		_TintingGlobalValue( "Tinting Paint Mask", Range( 0, 1 ) ) = 1
		_TintingMultiValue( "Tinting Multi Mask", Range( 0, 1 ) ) = 1
		_TintingLumaValue( "Tinting Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _TintingLumaRemap( "Tinting Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_TintingMeshValue( "Tinting Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _TintingMeshMode( "Tinting Mesh Mask", Float ) = 0
		[StyledRemapSlider] _TintingMeshRemap( "Tinting Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _TintingBlendRemap( "Tinting Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[StyledSpace(10)] _TintingEnd( "[ Tinting End]", Float ) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)] _DrynessCategory( "[ Dryness Category ]", Float ) = 1
		[StyledMessage(Warning, The Dryness feature is only available with The Visual Engine Core package., 0, 10)] _DrynessLiteInfo( "# Dryness Lite Info", Float ) = 0
		[StyledColoring] _DrynessColoring( "# Dryness Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_DrynessIntensityValue( "Dryness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _DrynessBakeMode( "Dryness Baking", Float ) = 0
		_DrynessGrayValue( "Dryness Gray", Range( 0, 1 ) ) = 1
		_DrynessShiftValue( "Dryness Shift", Range( 0, 1 ) ) = 0
		[HDR][Gamma] _DrynessColor( "Dryness Color", Color ) = ( 1, 0.7083712, 0.495283, 1 )
		_DrynessSubsurfaceValue( "Dryness Subsurface", Range( 0, 1 ) ) = 0.5
		_DrynessSmoothnessValue( "Dryness Smoothness", Range( 0, 1 ) ) = 0.5
		[StyledSpace(10)] _DrynessSpace( "[ Dryness Space ]", Float ) = 1
		_DrynessGlobalValue( "Dryness Atmo Mask", Range( 0, 1 ) ) = 1
		_DrynessMultiValue( "Dryness Multi Mask", Range( 0, 1 ) ) = 1
		_DrynessLumaValue( "Dryness Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _DrynessLumaRemap( "Dryness Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_DrynessMeshValue( "Dryness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _DrynessMeshMode( "Dryness Mesh Mask", Float ) = 0
		[StyledRemapSlider] _DrynessMeshRemap( "Dryness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _DrynessBlendRemap( "Dryness Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[StyledSpace(10)] _DrynessEnd( "[ Dryness End ]", Float ) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)] _OverlayCategory( "[ Overlay Category ]", Float ) = 1
		[StyledMessage(Warning, The Overlay Glitter feature is only available with The Visual Engine Core package., 0, 10)] _OverlayLiteInfo( "# Overlay Lite Info", Float ) = 0
		_OverlayIntensityValue( "Overlay Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OverlayBakeMode( "Overlay Baking", Float ) = 0
		[Enum(Off,0,On,1)] _OverlayTextureMode( "Overlay Maps", Float ) = 0
		[Space(10)][StyledTextureSingleLine] _OverlayAlbedoTex( "Overlay Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _OverlayNormalTex( "Overlay Normal", 2D ) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)] _OverlaySampleMode( "Overlay Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _OverlayCoordMode( "Overlay UV Mode", Float ) = 0
		[StyledVector(9)] _OverlayCoordValue( "Overlay UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HDR] _OverlayColor( "Overlay Color", Color ) = ( 0.2815503, 0.4009458, 0.5377358, 1 )
		_OverlayNormalValue( "Overlay Normal", Range( -8, 8 ) ) = 1
		_OverlaySubsurfaceValue( "Overlay Subsurface", Range( 0, 1 ) ) = 0.5
		_OverlaySmoothnessValue( "Overlay Smoothness", Range( 0, 1 ) ) = 0.5
		[StyledColoring] _OverlayColoringOn( "# Overlay Coloring On", Color ) = ( 1, 1, 1, 0.6 )
		[Space(10)][StyledTextureSingleLine] _OverlayGlitterTexRT( "Overlay Glitter RT", 2D ) = "black" {}
		[Space(10)] _OverlayGlitterIntensityValue( "Overlay Glitter Intensity", Range( 0, 1 ) ) = 1
		[HDR] _OverlayGlitterColor( "Overlay Glitter Color", Color ) = ( 0.7215686, 1.913725, 2.996078, 1 )
		_OverlayGlitterTillingValue( "Overlay Glitter Tilling", Range( 0, 10 ) ) = 2
		_OverlayGlitterDistValue( "Overlay Glitter Limit", Range( 0, 200 ) ) = 100
		[StyledColoring] _OverlayColoringOff( "# Overlay Coloring Off", Color ) = ( 1, 1, 1, 1 )
		[Space(10)] _OverlayGlobalValue( "Overlay Atmo Mask", Range( 0, 1 ) ) = 1
		_OverlayLumaValue( "Overlay Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _OverlayLumaRemap( "Overlay Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayProjValue( "Overlay ProjY Mask", Range( 0, 1 ) ) = 0.5
		[StyledRemapSlider] _OverlayProjRemap( "Overlay ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayMeshValue( "Overlay Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _OverlayMeshMode( "Overlay Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OverlayMeshRemap( "Overlay Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _OverlayBlendRemap( "Overlay Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[HideInInspector] _overlay_vert_mode( "_overlay_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _overlay_coord_value( "_overlay_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _OverlayEnd( "[ Overlay End ]", Float ) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)] _WetnessCategory( "[ Wetness Category ]", Float ) = 1
		[StyledMessage(Warning, The Wetness feature is only available with The Visual Engine Core package., 0, 10)] _WetnessLiteInfo( "# Wetness Lite Info", Float ) = 0
		[StyledColoring] _WetnessColoring( "# Wetness Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_WetnessIntensityValue( "Wetness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _WetnessBakeMode( "Wetness Baking", Float ) = 0
		_WetnessContrastValue( "Wetness Contrast", Range( 0, 1 ) ) = 0.2
		_WetnessSmoothnessValue( "Wetness Smoothness", Range( 0, 1 ) ) = 0.8
		[Space(10)] _WetnessGlobalValue( "Wetness Atmo Mask", Range( 0, 1 ) ) = 1
		_WetnessMeshValue( "Wetness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessMeshMode( "Wetness Mesh Mask", Float ) = 0
		[StyledRemapSlider] _WetnessMeshRemap( "Wetness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _WetnessWaterIntensityValue( "Wetness Water Intensity", Range( 0, 1 ) ) = 0
		[HDR] _WetnessWaterColor( "Wetness Water Color", Color ) = ( 0.5420078, 0.7924528, 0.6068289, 1 )
		_WetnessWaterBaseValue( "Wetness Water Base Mask", Range( 0, 1 ) ) = 1
		_WetnessWaterMeshValue( "Wetness Water Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessWaterMeshMode( "Wetness Water Mesh Mask", Float ) = 1
		[StyledRemapSlider] _WetnessWaterMeshRemap( "Wetness Water Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _WetnessWaterBlendRemap( "Wetness Water Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledTextureSingleLine] _WetnessDropsTexRT( "Wetness Drops RT", 2D ) = "white" {}
		[Space(10)] _WetnessDropsIntensityValue( "Wetness Drops Intensity", Range( 0, 1 ) ) = 1
		_WetnessDropsNormalValue( "Wetness Drops Normal", Range( 0, 1 ) ) = 1
		_WetnessDropsTillingValue( "Wetness Drops Tilling", Range( 0, 10 ) ) = 1
		_WetnessDropsDistValue( "Wetness Drops Limit", Range( 0, 200 ) ) = 50
		_WetnessDropsMeshValue( "Wetness Drops Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessDropsMeshMode( "Wetness Drops Mesh Mask", Float ) = 2
		[StyledRemapSlider] _WetnessDropsMeshRemap( "Wetness Drops Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _WetnessEnd( "[ Wetness End ]", Float ) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)] _CutoutCategory( "[ Cutout Category ]", Float ) = 1
		[StyledMessage(Warning, The Cutout feature is only available with The Visual Engine Core package., 0, 10)] _CutoutLiteInfo( "# Cutout Lite Info", Float ) = 0
		[StyledColoring] _CutoutColoring( "# Cutout Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_CutoutIntensityValue( "Cutout Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Affect Shadow Pass,1)] _CutoutShadowMode( "Cutout Shadow", Float ) = 1
		[Enum(Off,0,Bake Settings To Textures,1)] _CutoutBakeMode( "Cutout Baking", Float ) = 0
		[StyledSpace(10)] _CutoutSpace( "[ Cutout Space ]", Float ) = 1
		_CutoutGlobalValue( "Cutout Fade Mask", Range( 0, 1 ) ) = 1
		_CutoutMultiValue( "Cutout Multi Mask", Range( 0, 1 ) ) = 1
		_CutoutAlphaValue( "Cutout Alpha Mask", Range( 0, 1 ) ) = 0
		_CutoutMeshValue( "Cutout Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _CutoutMeshMode( "Cutout Mesh Mask", Float ) = 0
		[StyledRemapSlider] _CutoutMeshRemap( "Cutout Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		_CutoutNoiseValue( "Cutout Noise Mask", Range( 0, 1 ) ) = 1
		_CutoutNoiseTillingValue( "Cutout Noise Tilling", Range( 0, 100 ) ) = 10
		[StyledSpace(10)] _CutoutEnd( "[ Cutout End ]", Float ) = 1
		[StyledCategory(Dither Settings, true, 0, 10)] _DitherCategory( "[ Dither Category ]", Float ) = 1
		[StyledMessage(Warning, The Dither feature is only available with The Visual Engine Core package., 0, 10)] _DitherLiteInfo( "# Dither Lite Info", Float ) = 0
		[StyledColoring] _DitherColoring( "# Dither Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_DitherConstantValue( "Dither Constant", Range( 0, 1 ) ) = 0
		_DitherProximityValue( "Dither Proximity", Range( 0, 1 ) ) = 0
		_DitherProximityMinValue( "Dither Proximity Start", Range( 0, 40 ) ) = 0
		_DitherProximityMaxValue( "Dither Proximity Limit", Range( 0, 40 ) ) = 1
		_DitherDistanceValue( "Dither Distance", Range( 0, 1 ) ) = 0
		_DitherDistanceMinValue( "Dither Distance Start", Range( 0, 1000 ) ) = 0
		_DitherDistanceMaxValue( "Dither Distance Limit", Range( 0, 1000 ) ) = 0
		_DitherGlancingValue( "Dither Glancing", Range( 0, 1 ) ) = 0
		_DitherGlancingAngleValue( "Dither Glanging Angle", Range( 0, 8 ) ) = 1
		[Enum(Off,0,Affect Shadow Pass,1)] _DitherShadowMode( "Dither Shadow", Float ) = 1
		[Space(10)] _DitherMultiValue( "Dither Multi Mask", Range( 0, 1 ) ) = 0
		_DitherNoiseTillingValue( "Dither Noise Tilling", Range( 0, 100 ) ) = 50
		[StyledSpace(10)] _DitherEnd( "[ Dither End ]", Float ) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)] _EmissiveCategory( "[ Emissive Category ]", Float ) = 1
		_EmissiveIntensityValue( "Emissive Intensity", Range( 0, 1 ) ) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)] _EmissiveFlagMode( "Emissive GI Mode", Float ) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)] _EmissiveColorMode( "Emissive Color", Float ) = 0
		[HDR] _EmissiveColor( "Emissive Color", Color ) = ( 1, 1, 1, 1 )
		[Enum(Nits,0,EV100,1)] _EmissivePowerMode( "Emissive Value", Float ) = 0
		_EmissivePowerValue( "Emissive Value", Float ) = 1
		_EmissiveExposureValue( "Emissive Weight", Range( 0, 1 ) ) = 0.5
		[Space(10)][StyledTextureSingleLine] _EmissiveMaskTex( "Emissive Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)] _EmissiveSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _EmissiveCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(18)] _EmissiveCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Space(10)] _EmissiveGlobalValue( "Emissive Glow Mask", Range( 0, 1 ) ) = 1
		_EmissiveMaskValue( "Emissive TexR Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _EmissiveMaskRemap( "Emissive TexR Mask", Vector ) = ( 0, 1, 0, 0 )
		_EmissiveMeshValue( "Emissive Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _EmissiveMeshMode( "Emissive Mesh Mask", Float ) = 0
		[StyledRemapSlider] _EmissiveMeshRemap( "Emissive Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _EmissiveEnd( "[ Emissive End ]", Float ) = 1
		[HideInInspector] _emissive_power_value( "_emissive_power_value", Float ) = 1
		[HideInInspector] _emissive_vert_mode( "_emissive_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _emissive_coord_value( "_emissive_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Subsurface Settings, true, 0, 10)] _SubsurfaceCategory( "[ Subsurface Category ]", Float ) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)] _SubsurfaceAproxInfo( "# Subsurface Aprox Info", Float ) = 0
		[DiffusionProfile] _SubsurfaceDiffusion( "Subsurface Diffusion", Float ) = 0
		[HideInInspector] _SubsurfaceDiffusion_Asset( "Subsurface Diffusion", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _SubsurfaceSpace( "# SubsurfaceSpace", Float ) = 0
		_SubsurfaceIntensityValue( "Subsurface Intensity", Range( 0, 1 ) ) = 0
		[HDR] _SubsurfaceColor( "Subsurface Color", Color ) = ( 1, 1, 1, 1 )
		_SubsurfaceScatteringValue( "Subsurface Value", Range( 0, 16 ) ) = 2
		_SubsurfaceAngleValue( "Subsurface Angle", Range( 1, 16 ) ) = 8
		_SubsurfaceDirectValue( "Subsurface Direct", Range( 0, 1 ) ) = 1
		_SubsurfaceNormalValue( "Subsurface Normal", Range( 0, 1 ) ) = 0
		_SubsurfaceAmbientValue( "Subsurface Ambient", Range( 0, 1 ) ) = 0.2
		_SubsurfaceShadowValue( "Subsurface Shadow", Range( 0, 1 ) ) = 1
		_SubsurfaceThicknessValue( "Subsurface Thickness", Range( 0, 1 ) ) = 0
		[Space(10)] _SubsurfaceGlobalValue( "Subsurface Glow Mask", Range( 0, 1 ) ) = 1
		_SubsurfaceMultiValue( "Subsurface Multi Mask", Range( 0, 1 ) ) = 1
		[StyledSpace(10)] _SubsurfaceEnd( "[ Subsurface End ]", Float ) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)] _PerspectiveCategory( "[ Perspective Category ]", Float ) = 1
		[StyledMessage(Warning, The Perspective feature is only available with The Visual Engine Core package., 0, 10)] _PerspectiveLiteInfo( "# Perspective Lite Info", Float ) = 0
		[StyledColoring] _PerspectiveColoring( "# Perspective Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_PerspectiveIntensityValue( "Perspective Intensity", Range( 0, 8 ) ) = 0
		_PerspectiveAngleValue( "Perspective Angle", Range( 0, 8 ) ) = 1
		[StyledSpace(10)] _PerspectiveEnd( "[ Perspective End ]", Float ) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)] _SizeFadeCategory( "[ Size Fade Category ]", Float ) = 1
		[StyledMessage(Warning, The Size Fade feature is only available with The Visual Engine Core package., 0, 10)] _SizeFadeLiteInfo( "# SizeFade Lite Info", Float ) = 0
		[StyledColoring] _SizeFadeColoring( "# SizeFade Coloring", Color ) = ( 1, 1, 1, 0.6 )
		_SizeFadeIntensityValue( "Size Fade Intensity", Range( 0, 1 ) ) = 0
		[Enum(All Axis,0,Y Axis,1)] _SizeFadeScaleMode( "Size Fade Mode", Float ) = 0
		_SizeFadeScaleValue( "Size Fade Value", Range( 0, 1 ) ) = 1
		_SizeFadeDistMinValue( "Size Fade Start", Range( 0, 1000 ) ) = 0
		_SizeFadeDistMaxValue( "Size Fade Limit", Range( 0, 1000 ) ) = 0
		[Space(10)] _SizeFadeScaleValue1( "Size Fade Form Mask", Range( 0, 1 ) ) = 1
		[StyledSpace(10)] _SizeFadeEnd( "[ Size Fade End ]", Float ) = 1
		[StyledCategory(Motion Settings, true, 0, 10)] _MotionCategory( "[ Motion Category ]", Float ) = 1
		[StyledMessage(Warning, Motion Interaction and Elements support are only available with The Visual Engine Core package., 0, 10)] _MotionLiteInfo( "# Motion Lite Info", Float ) = 0
		[NoScaleOffset][StyledTextureSingleLine] _MotionNoiseTex( "Motion Texture", 2D ) = "white" {}
		[Space(10)] _MotionIntensityValue( "Motion Intensity", Range( 0, 1 ) ) = 1
		_MotionDistValue( "Motion Details Limit", Range( 0, 1000 ) ) = 100
		[Space(10)] _MotionBaseIntensityValue( "Motion Primary Intensity", Range( 0, 10 ) ) = 0
		_MotionBaseDelayValue( "Motion Primary Delay", Range( 0, 1 ) ) = 0
		_MotionBaseNoiseValue( "Motion Primary Noise", Range( 0, 1 ) ) = 0.5
		_MotionBasePivotValue( "Motion Primary Pivots", Range( 0, 1 ) ) = 0.8
		_MotionBasePhaseValue( "Motion Primary Phase", Range( 0, 1 ) ) = 0
		_MotionBaseTillingValue( "Motion Primary Tilling", Range( 0, 100 ) ) = 5
		_MotionBaseSpeedValue( "Motion Primary Speed", Range( 0, 50 ) ) = 5
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionBaseMaskMode( "Motion Primary Anim Mask", Float ) = 3
		[StyledRemapSlider] _MotionBaseMaskRemap( "Motion Primary Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionSmallIntensityValue( "Motion Second Intensity", Range( 0, 10 ) ) = 0
		_MotionSmallDelayValue( "Motion Second Delay", Range( 0, 1 ) ) = 0
		_MotionSmallNoiseValue( "Motion Second Noise", Range( 0, 1 ) ) = 0.5
		_MotionSmallPivotValue( "Motion Second Pivots", Range( 0, 1 ) ) = 0.6
		_MotionSmallPhaseValue( "Motion Second Phase", Range( 0, 1 ) ) = 0
		_MotionSmallTillingValue( "Motion Second Tilling", Range( 0, 100 ) ) = 5
		_MotionSmallSpeedValue( "Motion Second Speed", Range( 0, 50 ) ) = 5
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionSmallMaskMode( "Motion Second Anim Mask", Float ) = 1
		[StyledRemapSlider] _MotionSmallMaskRemap( "Motion Second Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionTinyIntensityValue( "Motion Leaves Intensity", Range( 0, 10 ) ) = 0
		_MotionTinyNoiseValue( "Motion Leaves Noise", Range( 0, 1 ) ) = 1
		_MotionTinyTillingValue( "Motion Leaves Tilling", Range( 0, 100 ) ) = 50
		_MotionTinySpeedValue( "Motion Leaves Speed", Range( 0, 50 ) ) = 10
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionTinyMaskMode( "Motion Leaves Anim Mask", Float ) = 2
		[StyledRemapSlider] _MotionTinyMaskRemap( "Motion Leaves Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionHighlightValue( "Motion Ripples Intensity", Range( 0, 1 ) ) = 0
		[HDR] _MotionHighlightColor( "Motion Ripples Color", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _motion_base_mask_mode( "_motion_base_mask_mode", Float ) = 0
		[HideInInspector] _motion_base_vert_mode( "_motion_base_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_base_proc_mode( "_motion_base_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_mask_mode( "_motion_small_mask_mode", Float ) = 0
		[HideInInspector] _motion_small_vert_mode( "_motion_small_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_proc_mode( "_motion_small_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_mask_mode( "_motion_tiny_mask_mode", Float ) = 0
		[HideInInspector] _motion_small_mode( "_motion_small_mode", Float ) = 0
		[HideInInspector] _motion_tiny_vert_mode( "_motion_tiny_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_proc_mode( "_motion_tiny_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _MotionEnd( "[ Motion End ]", Float ) = 1
		[StyledCategory(Normal Settings, true, 0, 10)] _NormalCategory( "[ Normal Category ]", Float ) = 1
		[StyledMessage(Warning, Computing normals from vertex transform is only available with The Visual Engine Core package., 0, 10)] _NormalLiteInfo( "# Normal Lite Info", Float ) = 0
		_NormalFlattenValue( "Normal Flattening", Range( 0, 1 ) ) = 0
		_NormalSphereValue( "Normal Spherical", Range( 0, 1 ) ) = 0
		[StyledVector(18)] _NormalSphereOffsetValue( "Normal Spherical Offset", Vector ) = ( 0, 0, 0, 0 )
		[StyledColoring] _NormalColoringStart( "# Normal Coloring Start", Color ) = ( 1, 1, 1, 0.6 )
		_NormalComputeValue( "Normal Compute", Range( 0, 1 ) ) = 0
		[StyledColoring] _NormalColoringEnd( "# Normal Coloring End", Color ) = ( 1, 1, 1, 1 )
		[Space(10)] _NormalMeshValue( "Normal Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _NormalMeshMode( "Normal Mesh Mask", Float ) = 2
		[StyledRemapSlider] _NormalMeshRemap( "Normal Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[HideInInspector] _normal_vert_mode( "_normal_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _NormalEnd( "[ Normal End ]", Float ) = 1
		[HideInInspector] _render_cull( "_render_cull", Float ) = 0
		[HideInInspector] _render_src( "_render_src", Float ) = 5
		[HideInInspector] _render_dst( "_render_dst", Float ) = 10
		[HideInInspector] _render_zw( "_render_zw", Float ) = 1
		[HideInInspector] _render_coverage( "_render_coverage", Float ) = 0
		[HideInInspector] _IsGeneralShader( "_IsGeneralShader", Float ) = 1
		[HideInInspector] _IsStandardShader( "_IsStandardShader", Float ) = 1
		[HideInInspector] _IsLiteShader( "_IsLiteShader", Float ) = 1
		[HideInInspector] _texcoord( "", 2D ) = "white" {}

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		AlphaToMask Off

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			ColorMask [_LightLayersMaskBuffer4] 4
			ColorMask [_LightLayersMaskBuffer5] 5

			HLSLPROGRAM
            #define _ENERGY_CONSERVING_SPECULAR 1
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #define ASE_FRAGMENT_NORMAL 0
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_SPECULAR_COLOR 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_VERSION 19802
            #define ASE_SRP_VERSION 140012
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ LIGHT_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord6.xyz = vertexToFrag73_g156872;
				output.ase_texcoord7.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord8 = vertexToFrag24_g170409;
				
				output.ase_texcoord5 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord8;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				half3 Input_Albedo24_g170632 = Out_Albedo4_g170633;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170632 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170632 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170632 = staticSwitch22_g170632;
				float4 break24_g170628 = Out_Shader4_g170633;
				half Metallic95_g170628 = break24_g170628.x;
				half Input_Metallic25_g170632 = Metallic95_g170628;
				half OneMinusReflectivity31_g170632 = ( (ColorSpaceDielectricSpec23_g170632).w - ( (ColorSpaceDielectricSpec23_g170632).w * Input_Metallic25_g170632 ) );
				
				float3 appendResult23_g170628 = (float3(Out_NormalTS4_g170633 , 1.0));
				float3 temp_output_13_0_g170631 = appendResult23_g170628;
				float3 temp_output_33_0_g170631 = ( temp_output_13_0_g170631 * _render_normal );
				float3 switchResult12_g170631 = (((IsFrontFace>0)?(temp_output_13_0_g170631):(temp_output_33_0_g170631)));
				
				float3 lerpResult28_g170632 = lerp( (ColorSpaceDielectricSpec23_g170632).xyz , Input_Albedo24_g170632 , Input_Metallic25_g170632);
				half RenderSpec102_g170628 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170632 * OneMinusReflectivity31_g170632 );
				surfaceDescription.Normal = switchResult12_g170631;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170632 * RenderSpec102_g170628 );
				#endif

				surfaceDescription.Smoothness = break24_g170628.w;
				surfaceDescription.Occlusion = break24_g170628.y;
				surfaceDescription.Emission = (Out_Emissive4_g170633).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );

				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.uv3.x , inputMesh.uv3.z , inputMesh.uv3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.uv0.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord4.xyz = vertexToFrag73_g156872;
				output.ase_texcoord5.xyz = vertexToFrag76_g156872;
				output.ase_texcoord6.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir( inputMesh.tangentOS.xyz );
				output.ase_texcoord7.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord9 = vertexToFrag24_g170409;
				
				output.ase_texcoord2 = inputMesh.uv0;
				output.ase_texcoord3.xy = inputMesh.uv2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.zw = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				output.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					output.VizUV.xy = vizUV;
					output.LightCoord = lightCoord;
				#endif

				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;

				float3 V = float3(1.0, 1.0, 1.0);

				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 ase_normalWS = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord7.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord9;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				half3 Input_Albedo24_g170632 = Out_Albedo4_g170633;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170632 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170632 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170632 = staticSwitch22_g170632;
				float4 break24_g170628 = Out_Shader4_g170633;
				half Metallic95_g170628 = break24_g170628.x;
				half Input_Metallic25_g170632 = Metallic95_g170628;
				half OneMinusReflectivity31_g170632 = ( (ColorSpaceDielectricSpec23_g170632).w - ( (ColorSpaceDielectricSpec23_g170632).w * Input_Metallic25_g170632 ) );
				
				float3 appendResult23_g170628 = (float3(Out_NormalTS4_g170633 , 1.0));
				float3 temp_output_13_0_g170631 = appendResult23_g170628;
				float3 temp_output_33_0_g170631 = ( temp_output_13_0_g170631 * _render_normal );
				float3 switchResult12_g170631 = (((isFrontFace>0)?(temp_output_13_0_g170631):(temp_output_33_0_g170631)));
				
				float3 lerpResult28_g170632 = lerp( (ColorSpaceDielectricSpec23_g170632).xyz , Input_Albedo24_g170632 , Input_Metallic25_g170632);
				half RenderSpec102_g170628 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170632 * OneMinusReflectivity31_g170632 );
				surfaceDescription.Normal = switchResult12_g170631;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170632 * RenderSpec102_g170628 );
				#endif

				surfaceDescription.Smoothness = break24_g170628.w;
				surfaceDescription.Occlusion = break24_g170628.y;
				surfaceDescription.Emission = (Out_Emissive4_g170633).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g156872;
				output.ase_texcoord6.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord7 = vertexToFrag24_g170409;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord7;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
					float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
					outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
					DecalPrepassData decalPrepassData;
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g156872;
				output.ase_texcoord6.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord7 = vertexToFrag24_g170409;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord7;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g156872;
				output.ase_texcoord6.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord7 = vertexToFrag24_g170409;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord7;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				float3 appendResult23_g170628 = (float3(Out_NormalTS4_g170633 , 1.0));
				float3 temp_output_13_0_g170631 = appendResult23_g170628;
				float3 temp_output_33_0_g170631 = ( temp_output_13_0_g170631 * _render_normal );
				float3 switchResult12_g170631 = (((IsFrontFace>0)?(temp_output_13_0_g170631):(temp_output_33_0_g170631)));
				
				float4 break24_g170628 = Out_Shader4_g170633;
				
				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;

				surfaceDescription.Normal = switchResult12_g170631;
				surfaceDescription.Smoothness = break24_g170628.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    					depthColor = packedInput.positionCS.z;
    					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
    				DecalPrepassData decalPrepassData;
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
    				decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif
				#endif // SCENESELECTIONPASS
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshPositionRWS : TEXCOORD0;
				float3 vpassPositionCS : TEXCOORD1;
				float3 vpassPreviousPositionCS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g156872;
				output.ase_texcoord6.xyz = vertexToFrag76_g156872;
				output.ase_texcoord7.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir( inputMesh.tangentOS.xyz );
				output.ase_texcoord8.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord9.xyz = ase_bitangentWS;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord10 = vertexToFrag24_g170409;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				output.vmeshPositionCS = VMESHpositionCS;
				output.vmeshPositionRWS = VMESHpositionRWS;

				output.vpassPositionCS = float3(VPASSpositionCS.xyw);
				output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				return output;
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif
					#if defined( ASE_DEPTH_WRITE_ON )
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
					, bool ase_vface : SV_IsFrontFace )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshPositionRWS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;

				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 ase_normalWS = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord8.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord10;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				float3 appendResult23_g170628 = (float3(Out_NormalTS4_g170633 , 1.0));
				float3 temp_output_13_0_g170631 = appendResult23_g170628;
				float3 temp_output_33_0_g170631 = ( temp_output_13_0_g170631 * _render_normal );
				float3 switchResult12_g170631 = (((ase_vface>0)?(temp_output_13_0_g170631):(temp_output_33_0_g170631)));
				
				float4 break24_g170628 = Out_Shader4_g170633;
				
				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				surfaceDescription.Normal = switchResult12_g170631;
				surfaceDescription.Smoothness = break24_g170628.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
					float3 positionOS = mul( GetWorldToObjectMatrix(),  float4( PositionRWS, 1.0 ) ).xyz;
					float3 previousPositionRWS = mul( GetPrevObjectToWorldMatrix(),  float4( positionOS, 1.0 ) ).xyz;
					packedInput.vpassPositionCS = mul( UNITY_MATRIX_UNJITTERED_VP, float4( PositionRWS, 1.0 ) ).xyw;
					packedInput.vpassPreviousPositionCS = mul( UNITY_MATRIX_PREV_VP, float4( previousPositionRWS, 1.0 ) ).xyw;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
					#endif
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
					outDecalBuffer.w = (GetMeshRenderingLightLayer() & 0x000000FF) / 255.0;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
			#pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

			#if ( UNITY_VERSION <= 202236 )
				#if ( ASE_FRAGMENT_NORMAL == 1 )
					GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#elif ( ASE_FRAGMENT_NORMAL == 2 )
					GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#endif

				#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
				}
				#endif
			#else
				#ifdef DECAL_NORMAL_BLENDING
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif
			#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						surfaceData.metallic = 0;
					}
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord8.xyz = vertexToFrag73_g156872;
				output.ase_texcoord9.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord10 = vertexToFrag24_g170409;
				
				output.ase_texcoord7 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : inputMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = inputMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(inputMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					output.vpassPositionCS = float3(VPASSpositionCS.xyw);
					output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
						, out float4 outColor:SV_Target0
					#ifdef UNITY_VIRTUAL_TEXTURING
						, out float4 outVTFeedback : SV_Target1
					#endif
					#ifdef OUTPUT_SPLIT_LIGHTING
						, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
						, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
					#elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
						, out float4 outMotionVec : MOTION_VECTOR_TARGET
					#endif
					#if defined( ASE_DEPTH_WRITE_ON )
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
					 )
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				

				
				#if ( ASE_SRP_VERSION >= 100000 ) && ( ASE_SRP_VERSION >= 140007 )
				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
				#endif
			

				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord10;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				half3 Input_Albedo24_g170632 = Out_Albedo4_g170633;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170632 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170632 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170632 = staticSwitch22_g170632;
				float4 break24_g170628 = Out_Shader4_g170633;
				half Metallic95_g170628 = break24_g170628.x;
				half Input_Metallic25_g170632 = Metallic95_g170628;
				half OneMinusReflectivity31_g170632 = ( (ColorSpaceDielectricSpec23_g170632).w - ( (ColorSpaceDielectricSpec23_g170632).w * Input_Metallic25_g170632 ) );
				
				float3 appendResult23_g170628 = (float3(Out_NormalTS4_g170633 , 1.0));
				float3 temp_output_13_0_g170631 = appendResult23_g170628;
				float3 temp_output_33_0_g170631 = ( temp_output_13_0_g170631 * _render_normal );
				float3 switchResult12_g170631 = (((IsFrontFace>0)?(temp_output_13_0_g170631):(temp_output_33_0_g170631)));
				
				float3 lerpResult28_g170632 = lerp( (ColorSpaceDielectricSpec23_g170632).xyz , Input_Albedo24_g170632 , Input_Metallic25_g170632);
				half RenderSpec102_g170628 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170632 * OneMinusReflectivity31_g170632 );
				surfaceDescription.Normal = switchResult12_g170631;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170632 * RenderSpec102_g170628 );
				#endif

				surfaceDescription.Smoothness = break24_g170628.w;
				surfaceDescription.Occlusion = break24_g170628.y;
				surfaceDescription.Emission = (Out_Emissive4_g170633).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
					#if defined( _WRITE_TRANSPARENT_MOTION_VECTOR )
						float3 positionOS = mul( GetWorldToObjectMatrix(),  float4( PositionRWS, 1.0 ) ).xyz;
						float3 previousPositionRWS = mul( GetPrevObjectToWorldMatrix(),  float4( positionOS, 1.0 ) ).xyz;
						packedInput.vpassPositionCS = mul( UNITY_MATRIX_UNJITTERED_VP, float4( PositionRWS, 1.0 ) ).xyw;
						packedInput.vpassPreviousPositionCS = mul( UNITY_MATRIX_PREV_VP, float4( previousPositionRWS, 1.0 ) ).xyw;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
						outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 140012
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            CBUFFER_START( UnityPerMaterial )
			half4 _NormalColoringStart;
			half4 _ThirdMeshRemap;
			half4 _SecondCoordValue;
			half4 _TintingLumaRemap;
			half4 _ThirdProjRemap;
			half4 _second_coord_value;
			half4 _SecondMeshRemap;
			half4 _ThirdBlendRemap;
			half4 _MotionTinyMaskRemap;
			half4 _TintingMeshRemap;
			half4 _motion_tiny_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _third_vert_mode;
			half4 _second_vert_mode;
			half4 _ThirdMaskCoordValue;
			half4 _DitherColoring;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _TintingBlendRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _GradientColorTwo;
			half4 _motion_small_proc_mode;
			half4 _CutoutMeshRemap;
			half4 _WetnessDropsMeshRemap;
			float4 _WetnessDropsTexRT_ST;
			half4 _MainColor;
			half4 _TintingColoring;
			half4 _third_coord_value;
			half4 _main_coord_value;
			half4 _ThirdColorTwo;
			half4 _VariationNoiseRemap;
			half4 _ThirdColor;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _CutoutColoring;
			half4 _ThirdOcclusionRemap;
			half4 _VariationColoring;
			half4 _ThirdLumaRemap;
			half4 _ThirdSmoothnessRemap;
			half4 _ThirdMultiRemap;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SecondMaskCoordValue;
			half4 _MotionBaseMaskRemap;
			half4 _third_mask_coord_value;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _ThirdMaskRemap;
			float4 _TintingColor;
			half4 _GradientColorOne;
			half4 _motion_small_vert_mode;
			half4 _GradientMeshRemap;
			half4 _EmissiveMeshRemap;
			half4 _SecondMultiRemap;
			half4 _Color;
			half4 _OverlayGlitterColor;
			half4 _emissive_coord_value;
			half4 _MainSmoothnessRemap;
			half4 _SizeFadeColoring;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _SecondSmoothnessRemap;
			half4 _DrynessLumaRemap;
			half4 _EmissiveColor;
			half4 _WetnessMeshRemap;
			half4 _DrynessMeshRemap;
			half4 _SecondOcclusionRemap;
			half4 _DrynessBlendRemap;
			half4 _SubsurfaceColor;
			half4 _WetnessColoring;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondColor;
			half4 _SecondColorTwo;
			half4 _MainMultiRemap;
			half4 _NormalColoringEnd;
			half4 _gradient_vert_mode;
			half4 _WetnessWaterColor;
			half4 _emissive_vert_mode;
			half4 _PerspectiveColoring;
			half4 _object_phase_mode;
			half4 _ThirdCoordValue;
			half4 _DrynessColoring;
			half4 _SecondProjRemap;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _SecondLumaRemap;
			half4 _MainOcclusionRemap;
			half4 _OverlayColoringOn;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _OverlayProjRemap;
			half4 _OverlayBlendRemap;
			half4 _OverlayColoringOff;
			float4 _DrynessColor;
			half4 _OverlayMeshRemap;
			half4 _overlay_vert_mode;
			half4 _MainCoordValue;
			half4 _OverlayLumaRemap;
			half4 _second_mask_coord_value;
			half4 _WetnessWaterBlendRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _MainAlbedoValue;
			half _MainMetallicValue;
			half _MainOcclusionValue;
			half _MainSmoothnessValue;
			half _SecondSampleMode;
			half _MainCoordMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayLiteInfo;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayBakeMode;
			half _GradientBakeMode;
			half _OverlayEnd;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _OverlayCategory;
			half _MainMultiMaskInfo;
			half _OcclusionCategory;
			half _OcclusionBakeMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _SecondBakeMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _OcclusionEnd;
			half _LayerEnd;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _DetailCategory;
			half _LayerCategory;
			half _MainColorMode;
			half _SecondBlendShaderValue;
			half _MainAlphaClipValue;
			half _OverlayGlobalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlayNormalValue;
			half _OverlayTextureMode;
			half _OverlaySampleMode;
			half _MotionHighlightValue;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _OcclusionIntensityValue;
			half _OverlayCoordMode;
			half _OcclusionMeshMode;
			half _OverlaySmoothnessValue;
			half _EmissiveMeshValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			half _OverlaySubsurfaceValue;
			float _emissive_power_value;
			half _EmissiveGlobalValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveColorMode;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondGlobalValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _SecondLumaValue;
			half _SecondBlendNormalValue;
			half _SecondMaskValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondIntensityValue;
			half _SecondNormalValue;
			half _SubsurfaceNormalValue;
			half _SecondAlphaClipValue;
			half _ThirdBlendNormalValue;
			half _ThirdBlendIntensityValue;
			half _ThirdGlobalValue;
			half _ThirdProjValue;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _ThirdLumaValue;
			half _ThirdMaskValue;
			half _ThirdIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _ThirdAlbedoValue;
			half _MainNormalValue;
			half _SubsurfaceDirectValue;
			half _DitherNoiseTillingValue;
			half _SubsurfaceCategory;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionDistValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _MotionTinySpeedValue;
			half _ObjectPivotMode;
			half _MotionTinyNoiseValue;
			half _MotionBasePhaseValue;
			half _VariationNoiseTillingValue;
			half _VariationNoisePivotsValue1;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _VariationEnd;
			half _VariationCategory;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _motion_small_mode;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePivotValue;
			half _TintingLiteInfo;
			half _ObjectModelMode;
			half _ObjectCategory;
			half _Cutoff;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderZWrite;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _NormalLiteInfo;
			half _IsTVEShader;
			half _ObjectEnd;
			half _IsCustomShader;
			half _IsCollected;
			half _MotionLiteInfo;
			half _MotionEnd;
			half _MotionCategory;
			half _NormalComputeValue;
			half _NormalEnd;
			half _NormalCategory;
			half _IsGeneralShader;
			half _IsStandardShader;
			half _IsLiteShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsShared;
			half _SubsurfaceEnd;
			half _TintingCategory;
			half _TintingSpace;
			half _DitherGlancingValue;
			half _DitherProximityMaxValue;
			half _DitherProximityMinValue;
			half _DitherProximityValue;
			half _DitherConstantValue;
			half _DitherEnd;
			half _DitherCategory;
			half _DitherLiteInfo;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutGlobalValue;
			half _CutoutNoiseTillingValue;
			half _CutoutNoiseValue;
			half _CutoutAlphaValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _DitherGlancingAngleValue;
			half _CutoutEnd;
			half _DitherDistanceValue;
			half _DitherDistanceMinValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalLiteInfo;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleValue1;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _PerspectiveLiteInfo;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMaxValue;
			half _TintingEnd;
			half _CutoutCategory;
			half _WetnessDropsMeshMode;
			half _DrynessGlobalValue;
			half _DrynessSubsurfaceValue;
			half _DrynessSmoothnessValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _DrynessLiteInfo;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _TintingIntensityValue;
			half _TintingBakeMode;
			half _DrynessMultiValue;
			half _CutoutLiteInfo;
			half _DrynessLumaValue;
			half _DrynessMeshValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _WetnessWaterMeshMode;
			half _WetnessWaterMeshValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterIntensityValue;
			half _WetnessMeshMode;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _WetnessLiteInfo;
			half _DrynessMeshMode;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTexRT);
			SAMPLER(sampler_WetnessDropsTexRT);
			TEXTURE2D(_OverlayGlitterTexRT);
			SAMPLER(sampler_OverlayGlitterTexRT);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			half4 TVE_AtmoParams;
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);
			half4 TVE_GlowParams;
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170619 = (TVEModelData)0;
				float In_Dummy16_g170619 = 0.0;
				TVEModelData Data16_g170512 = (TVEModelData)0;
				half Dummy1575_g170510 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170512 = Dummy1575_g170510;
				TVEModelData Data16_g170502 = (TVEModelData)0;
				float In_Dummy16_g170502 = 0.0;
				TVEModelData Data16_g170264 = (TVEModelData)0;
				half Dummy181_g170256 = ( ( _MotionCategory + _MotionEnd ) + _MotionLiteInfo );
				float In_Dummy16_g170264 = Dummy181_g170256;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156876 = (TVEModelData)0;
				half Dummy207_g156872 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g156876 = Dummy207_g156872;
				half3 PositionOS131_g156872 = inputMesh.positionOS;
				float3 In_PositionOS16_g156876 = PositionOS131_g156872;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g156872 = ase_positionWS;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156876 = PositionWS122_g156872;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156882 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156882 = ( localObjectPosition_UNITY_MATRIX_M14_g156882 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156882 = localObjectPosition_UNITY_MATRIX_M14_g156882;
				#endif
				float3 temp_output_340_7_g156872 = staticSwitch13_g156882;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156884 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156880 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g156872 = PositionOS131_g156872;
				float3 appendResult234_g156872 = (float3(break233_g156872.x , 0.0 , break233_g156872.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156872 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156872 = appendResult60_g156880;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156872 = appendResult234_g156872;
				#else
				float3 staticSwitch229_g156872 = _Vector0;
				#endif
				half3 PivotOS149_g156872 = staticSwitch229_g156872;
				float3 temp_output_122_0_g156884 = PivotOS149_g156872;
				float3 PivotsOnlyWS105_g156884 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156884 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156884 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156884 = ( localObjectPosition_UNITY_MATRIX_M14_g156884 + PivotsOnlyWS105_g156884 );
				#endif
				float3 temp_output_341_7_g156872 = staticSwitch13_g156884;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156872 = temp_output_341_7_g156872;
				#else
				float3 staticSwitch236_g156872 = temp_output_340_7_g156872;
				#endif
				float3 vertexToFrag76_g156872 = staticSwitch236_g156872;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156876 = PositionWO132_g156872;
				float3 In_PositionRawOS16_g156876 = PositionOS131_g156872;
				float3 In_PositionAddOS16_g156876 = float3( 0,0,0 );
				float3 In_PivotOS16_g156876 = PivotOS149_g156872;
				float3 In_PivotWS16_g156876 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156876 = PivotWO133_g156872;
				half3 NormalOS134_g156872 = inputMesh.normalOS;
				float3 In_NormalOS16_g156876 = NormalOS134_g156872;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156876 = Normal_WS95_g156872;
				float3 In_NormalRawOS16_g156876 = NormalOS134_g156872;
				float3 objToWorldDir298_g156872 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g156872 = objToWorldDir298_g156872;
				float3 In_NormalRawWS16_g156876 = Normal_RawWS136_g156872;
				half4 TangentlOS153_g156872 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156876 = TangentlOS153_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156876 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = inputMesh.ase_color;
				float4 In_VertexData16_g156876 = VertexMasks171_g156872;
				float mulTime113_g156879 = _TimeParameters.x * 0.52;
				float lerpResult128_g156879 = lerp( mulTime113_g156879 , ( ( mulTime113_g156879 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g156872 = PivotWO133_g156872;
				half Pivot_Position322_g156872 = ( break319_g156872.x + break319_g156872.z );
				float mulTime113_g156878 = _TimeParameters.x * 0.27;
				float lerpResult128_g156878 = lerp( mulTime113_g156878 , ( ( mulTime113_g156878 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g156881 = _object_phase_mode;
				float temp_output_30_0_g156881 = ( inputMesh.ase_color.r * break33_g156881.x );
				float temp_output_29_0_g156881 = ( inputMesh.ase_color.g * break33_g156881.y );
				float temp_output_31_0_g156881 = ( inputMesh.ase_color.b * break33_g156881.z );
				float temp_output_28_0_g156881 = ( temp_output_30_0_g156881 + temp_output_29_0_g156881 + temp_output_31_0_g156881 + ( inputMesh.ase_color.a * break33_g156881.w ) );
				float temp_output_315_0_g156872 = (frac( ( temp_output_28_0_g156881 + Pivot_Position322_g156872 ) )*2.0 + -1.0);
				float4 appendResult177_g156872 = (float4(sin( ( lerpResult128_g156879 + Pivot_Position322_g156872 ) ) , sin( ( lerpResult128_g156878 + Pivot_Position322_g156872 ) ) , temp_output_315_0_g156872 , 1.0));
				half4 MotionMasks176_g156872 = appendResult177_g156872;
				float4 In_PhaseData16_g156876 = MotionMasks176_g156872;
				half Object_HeightValue267_g156872 = _ObjectHeightValue;
				half Object_RadiusValue268_g156872 = _ObjectRadiusValue;
				float temp_output_270_0_g156872 = (PositionOS131_g156872).y;
				half Bounds_HeightMask274_g156872 = saturate( ( temp_output_270_0_g156872 / Object_HeightValue267_g156872 ) );
				half Bounds_SphereMask282_g156872 = saturate( ( length( PositionOS131_g156872 ) / max( Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 ) ) );
				float4 appendResult253_g156872 = (float4(Object_HeightValue267_g156872 , Object_RadiusValue268_g156872 , Bounds_HeightMask274_g156872 , Bounds_SphereMask282_g156872));
				half4 BoundsData254_g156872 = appendResult253_g156872;
				float4 In_BoundsData16_g156876 = BoundsData254_g156872;
				float4 In_RotationData16_g156876 = float4( 0,0,0,0 );
				{
				Data16_g156876.Dummy = In_Dummy16_g156876;
				Data16_g156876.PositionOS = In_PositionOS16_g156876;
				Data16_g156876.PositionWS = In_PositionWS16_g156876;
				Data16_g156876.PositionWO = In_PositionWO16_g156876;
				Data16_g156876.PositionRawOS = In_PositionRawOS16_g156876;
				Data16_g156876.PositionAddOS = In_PositionAddOS16_g156876;
				Data16_g156876.PivotOS = In_PivotOS16_g156876;
				Data16_g156876.PivotWS = In_PivotWS16_g156876;
				Data16_g156876.PivotWO = In_PivotWO16_g156876;
				Data16_g156876.NormalOS = In_NormalOS16_g156876;
				Data16_g156876.NormalWS = In_NormalWS16_g156876;
				Data16_g156876.NormalRawOS = In_NormalRawOS16_g156876;
				Data16_g156876.NormalRawWS = In_NormalRawWS16_g156876;
				Data16_g156876.TangentOS = In_TangentOS16_g156876;
				Data16_g156876.ViewDirWS = In_ViewDirWS16_g156876;
				Data16_g156876.VertexData = In_VertexData16_g156876;
				Data16_g156876.PhaseData = In_PhaseData16_g156876;
				Data16_g156876.BoundsData = In_BoundsData16_g156876;
				Data16_g156876.RotationData = In_RotationData16_g156876;
				}
				TVEModelData Data15_g157407 = Data16_g156876;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_PhaseData15_g157407 = Data15_g157407.PhaseData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				}
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_PhaseData16_g157406 = Out_PhaseData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				{
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.PhaseData = In_PhaseData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				}
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_PhaseData15_g170257 = Data15_g170257.PhaseData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				}
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170264 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170264 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170264 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170264 = Out_PositionRawOS15_g170257;
				float3 temp_cast_3 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170261 = _motion_small_vert_mode;
				float temp_output_30_0_g170261 = ( break1689_g170256.x * break33_g170261.x );
				float temp_output_29_0_g170261 = ( break1689_g170256.y * break33_g170261.y );
				float temp_output_31_0_g170261 = ( break1689_g170256.z * break33_g170261.z );
				float temp_output_28_0_g170261 = ( temp_output_30_0_g170261 + temp_output_29_0_g170261 + temp_output_31_0_g170261 + ( break1689_g170256.w * break33_g170261.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170261;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170266 = _motion_small_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170268 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170273 = ( clampResult17_g170268 - temp_output_7_0_g170273 );
				float temp_output_6_0_g170269 = saturate( ( ( temp_output_9_0_g170273 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170269 = ( temp_output_6_0_g170269 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170269 = temp_output_6_0_g170269;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170269;
				float4 lerpResult836_g170293 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2080_g170256 = (lerpResult836_g170293).xy;
				half2 Input_WindDirWS803_g170284 = Global_WindDirWS2080_g170256;
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				half3 Input_ModelPositionWO761_g170283 = Model_PositionWO162_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				half3 Input_ModelPivotsWO419_g170283 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170283 = _MotionSmallPivotValue;
				float3 lerpResult771_g170283 = lerp( Input_ModelPositionWO761_g170283 , Input_ModelPivotsWO419_g170283 , Input_MotionPivots629_g170283);
				float4 temp_output_1567_27_g170256 = Out_PhaseData15_g170257;
				half4 Model_PhaseData489_g170256 = temp_output_1567_27_g170256;
				half4 Input_ModelMotionData763_g170283 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170283 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170256 = ( lerpResult771_g170283 + ( (Input_ModelMotionData763_g170283).z * Input_MotionPhase764_g170283 * 5.0 ) );
				half3 Input_PositionWO419_g170284 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170284 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170284 = ( -(Input_PositionWO419_g170284).xz * Input_MotionTilling321_g170284 * 0.005 );
				float2 temp_output_3_0_g170286 = Noise_Coord515_g170284;
				float2 temp_output_21_0_g170286 = Input_WindDirWS803_g170284;
				float lerpResult128_g170285 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170284 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170284 = ( lerpResult128_g170285 * 0.02 * Input_MotionSpeed62_g170284 );
				float temp_output_15_0_g170286 = Noise_Speed516_g170284;
				float temp_output_23_0_g170286 = frac( temp_output_15_0_g170286 );
				float4 lerpResult39_g170286 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * temp_output_23_0_g170286 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170286 + ( temp_output_21_0_g170286 * frac( ( temp_output_15_0_g170286 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170286 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170284 = lerpResult39_g170286;
				half2 Noise_DirWS858_g170284 = ((temp_output_635_0_g170284).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170284 = _MotionSmallNoiseValue;
				half Global_WInd769_g170293 = (lerpResult836_g170293).z;
				float lerpResult853_g170293 = lerp( Global_WInd769_g170293 , saturate( (Global_WInd769_g170293*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170293 = _MotionIntensityValue;
				half Global_WindValue2081_g170256 = ( lerpResult853_g170293 * Input_MotionValue629_g170293 );
				half Input_WindValue881_g170284 = Global_WindValue2081_g170256;
				float lerpResult701_g170284 = lerp( 1.0 , Input_MotionNoise552_g170284 , Input_WindValue881_g170284);
				float2 lerpResult646_g170284 = lerp( Input_WindDirWS803_g170284 , Noise_DirWS858_g170284 , lerpResult701_g170284);
				half2 Small_DirWS817_g170284 = lerpResult646_g170284;
				float2 break823_g170284 = Small_DirWS817_g170284;
				half4 Noise_Params685_g170284 = temp_output_635_0_g170284;
				half Wind_Sinus820_g170284 = ( ((Noise_Params685_g170284).b*2.0 + -1.0) * Input_MotionNoise552_g170284 * 0.6 );
				float3 appendResult824_g170284 = (float3(break823_g170284.x , Wind_Sinus820_g170284 , break823_g170284.y));
				half Input_MotionDelay753_g170284 = _MotionSmallDelayValue;
				float lerpResult756_g170284 = lerp( 1.0 , ( Input_WindValue881_g170284 * Input_WindValue881_g170284 ) , Input_MotionDelay753_g170284);
				half Wind_Delay815_g170284 = lerpResult756_g170284;
				float3 appendResult825_g170284 = (float3(Wind_Delay815_g170284 , 1.0 , Wind_Delay815_g170284));
				float3 temp_output_827_0_g170284 = ( ( appendResult824_g170284 * Input_WindValue881_g170284 ) * appendResult825_g170284 );
				float2 break857_g170284 = Noise_DirWS858_g170284;
				float3 appendResult833_g170284 = (float3(break857_g170284.x , Wind_Sinus820_g170284 , break857_g170284.y));
				half Input_PushWave890_g170284 = 1.0;
				half Input_PushAlpha806_g170284 = ( 1.0 * 1.0 );
				float3 lerpResult840_g170284 = lerp( temp_output_827_0_g170284 , ( appendResult833_g170284 * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170284 = lerpResult840_g170284;
				#else
				float3 staticSwitch829_g170284 = temp_output_827_0_g170284;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170284 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170284 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170256 = temp_output_847_0_g170284;
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Small_Squash1489_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_3;
				#endif
				float3 temp_cast_6 = (0.0).xxx;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_DistMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170262 = ( break1710_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1710_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1710_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1710_g170256.w * break33_g170262.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170262;
				float4 break33_g170267 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170270 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170274 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170274 = ( clampResult17_g170270 - temp_output_7_0_g170274 );
				float temp_output_6_0_g170271 = saturate( ( ( temp_output_9_0_g170274 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170271;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				half3 Model_NormalOS554_g170256 = temp_output_1567_20_g170256;
				half3 Input_NormalOS533_g170289 = Model_NormalOS554_g170256;
				half3 Tiny_Position2063_g170256 = Model_PositionWO162_g170256;
				half3 Input_PositionWO500_g170289 = Tiny_Position2063_g170256;
				half Input_MotionTilling321_g170289 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170291 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170289 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170289 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170289).xz * Input_MotionTilling321_g170289 * 0.005 ) + ( lerpResult128_g170291 * Input_MotionSpeed62_g170289 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170289 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170289 = lerp( ( Input_NormalOS533_g170289 * Flutter_Noise535_g170289 ) , Flutter_Noise535_g170289 , Input_MotionNoise542_g170289);
				half2 Input_WindDirWS803_g170276 = Global_WindDirWS2080_g170256;
				half3 Input_ModelPositionWO761_g170275 = Model_PositionWO162_g170256;
				half3 Input_ModelPivotsWO419_g170275 = Model_PivotWO402_g170256;
				half Input_MotionPivots629_g170275 = _MotionBasePivotValue;
				float3 lerpResult771_g170275 = lerp( Input_ModelPositionWO761_g170275 , Input_ModelPivotsWO419_g170275 , Input_MotionPivots629_g170275);
				half4 Input_ModelMotionData763_g170275 = Model_PhaseData489_g170256;
				half Input_MotionPhase764_g170275 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170256 = ( lerpResult771_g170275 + ( (Input_ModelMotionData763_g170275).z * Input_MotionPhase764_g170275 * 5.0 ) );
				half3 Input_PositionWO419_g170276 = Base_Position1394_g170256;
				half Input_MotionTilling321_g170276 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170276 = ( -(Input_PositionWO419_g170276).xz * Input_MotionTilling321_g170276 * 0.005 );
				float2 temp_output_3_0_g170280 = Noise_Coord515_g170276;
				float2 temp_output_21_0_g170280 = Input_WindDirWS803_g170276;
				float mulTime113_g170279 = _TimeParameters.x * 0.02;
				float lerpResult128_g170279 = lerp( mulTime113_g170279 , ( ( mulTime113_g170279 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170276 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170276 = ( lerpResult128_g170279 * Input_MotionSpeed62_g170276 );
				float temp_output_15_0_g170280 = Noise_Speed516_g170276;
				float temp_output_23_0_g170280 = frac( temp_output_15_0_g170280 );
				float4 lerpResult39_g170280 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * temp_output_23_0_g170280 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170280 + ( temp_output_21_0_g170280 * frac( ( temp_output_15_0_g170280 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170280 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170276 = lerpResult39_g170280;
				half2 Noise_DirWS825_g170276 = ((temp_output_635_0_g170276).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170276 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170276 = Global_WindValue2081_g170256;
				float lerpResult701_g170276 = lerp( 1.0 , Input_MotionNoise552_g170276 , Input_WindValue853_g170276);
				float2 lerpResult646_g170276 = lerp( Input_WindDirWS803_g170276 , Noise_DirWS825_g170276 , lerpResult701_g170276);
				half Input_MotionDelay753_g170276 = _MotionBaseDelayValue;
				float lerpResult756_g170276 = lerp( 1.0 , ( Input_WindValue853_g170276 * Input_WindValue853_g170276 ) , Input_MotionDelay753_g170276);
				half Wind_Delay815_g170276 = lerpResult756_g170276;
				float2 temp_output_809_0_g170276 = ( lerpResult646_g170276 * Input_WindValue853_g170276 * Wind_Delay815_g170276 );
				half2 Bend_Dir859_g170276 = temp_output_809_0_g170276;
				float temp_output_862_0_g170276 = ( length( Bend_Dir859_g170276 ) * Input_MotionNoise552_g170276 );
				half2 Input_PushDirWS807_g170276 = float2( 1,0 );
				half Input_PushWave858_g170276 = 1.0;
				half Input_PushAlpha806_g170276 = ( 1.0 * 1.0 );
				float lerpResult831_g170276 = lerp( temp_output_862_0_g170276 , ( saturate( length( Input_PushDirWS807_g170276 ) ) * Input_PushWave858_g170276 ) , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170276 = lerpResult831_g170276;
				#else
				float staticSwitch828_g170276 = temp_output_862_0_g170276;
				#endif
				half Base_Wave2005_g170256 = staticSwitch828_g170276;
				float temp_output_888_0_g170284 = ( (Noise_Params685_g170284).b * Input_WindValue881_g170284 );
				float lerpResult867_g170284 = lerp( temp_output_888_0_g170284 , ( (Noise_Params685_g170284).b * Input_PushWave890_g170284 ) , Input_PushAlpha806_g170284);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170284 = lerpResult867_g170284;
				#else
				float staticSwitch886_g170284 = temp_output_888_0_g170284;
				#endif
				half Small_Wave1427_g170256 = staticSwitch886_g170284;
				float lerpResult2045_g170256 = lerp( Base_Wave2005_g170256 , Small_Wave1427_g170256 , _motion_small_mode);
				half Motion_Wave2048_g170256 = lerpResult2045_g170256;
				half Input_GlobalWave546_g170289 = Motion_Wave2048_g170256;
				float temp_output_548_0_g170289 = ( Input_GlobalWave546_g170289 * Input_GlobalWave546_g170289 );
				half Flutter_Wave556_g170289 = temp_output_548_0_g170289;
				half3 Tiny_Direction859_g170256 = ( lerpResult537_g170289 * Flutter_Wave556_g170289 );
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Motion_DistMask1820_g170256 * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_6;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170264 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170264 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170264 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170264 = temp_output_1567_19_g170256;
				float3 In_NormalOS16_g170264 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170264 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170264 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170264 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170264 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170264 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170264 = temp_output_1567_29_g170256;
				float4 In_PhaseData16_g170264 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170264 = temp_output_1567_30_g170256;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_base_vert_mode;
				float temp_output_30_0_g170263 = ( break748_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break748_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break748_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break748_g170256.w * break33_g170263.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170265 = _motion_base_proc_mode;
				float temp_output_30_0_g170265 = ( (Model_BoundsData1322_g170256).z * break33_g170265.x );
				float temp_output_29_0_g170265 = ( (Model_BoundsData1322_g170256).w * break33_g170265.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170265 + temp_output_29_0_g170265 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170272 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170272 = ( clampResult17_g170259 - temp_output_7_0_g170272 );
				float temp_output_6_0_g170260 = saturate( ( ( temp_output_9_0_g170272 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170260 = ( temp_output_6_0_g170260 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170260 = temp_output_6_0_g170260;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170260;
				float2 lerpResult811_g170276 = lerp( temp_output_809_0_g170276 , Input_PushDirWS807_g170276 , Input_PushAlpha806_g170276);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170276 = lerpResult811_g170276;
				#else
				float2 staticSwitch808_g170276 = temp_output_809_0_g170276;
				#endif
				float2 temp_output_38_0_g170277 = staticSwitch808_g170276;
				float2 break83_g170277 = temp_output_38_0_g170277;
				float3 appendResult79_g170277 = (float3(break83_g170277.x , 0.0 , break83_g170277.y));
				half2 Base_Bending893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Bending893_g170256 );
				#ifdef TVE_MOTION
				float2 staticSwitch2016_g170256 = Base_Motion1440_g170256;
				#else
				float2 staticSwitch2016_g170256 = float2( 0,0 );
				#endif
				float4 appendResult2041_g170256 = (float4(staticSwitch2016_g170256 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170256 = appendResult2041_g170256;
				float4 In_RotationData16_g170264 = Final_RotationData1570_g170256;
				{
				Data16_g170264.Dummy = In_Dummy16_g170264;
				Data16_g170264.PositionOS = In_PositionOS16_g170264;
				Data16_g170264.PositionWS = In_PositionWS16_g170264;
				Data16_g170264.PositionWO = In_PositionWO16_g170264;
				Data16_g170264.PositionRawOS = In_PositionRawOS16_g170264;
				Data16_g170264.PositionAddOS = In_PositionAddOS16_g170264;
				Data16_g170264.PivotOS = In_PivotOS16_g170264;
				Data16_g170264.PivotWS = In_PivotWS16_g170264;
				Data16_g170264.PivotWO = In_PivotWO16_g170264;
				Data16_g170264.NormalOS = In_NormalOS16_g170264;
				Data16_g170264.NormalWS = In_NormalWS16_g170264;
				Data16_g170264.NormalRawOS = In_NormalRawOS16_g170264;
				Data16_g170264.NormalRawWS = In_NormalRawWS16_g170264;
				Data16_g170264.TangentOS = In_TangentOS16_g170264;
				Data16_g170264.ViewDirWS = In_ViewDirWS16_g170264;
				Data16_g170264.VertexData = In_VertexData16_g170264;
				Data16_g170264.PhaseData = In_PhaseData16_g170264;
				Data16_g170264.BoundsData = In_BoundsData16_g170264;
				Data16_g170264.RotationData = In_RotationData16_g170264;
				}
				TVEModelData Data15_g170501 = Data16_g170264;
				float Out_Dummy15_g170501 = 0;
				float3 Out_PositionOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170501 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170501 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170501 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170501 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170501 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170501 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170501 = float3( 0,0,0 );
				float4 Out_VertexData15_g170501 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170501 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170501 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170501 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170501 = Data15_g170501.Dummy;
				Out_PositionOS15_g170501 = Data15_g170501.PositionOS;
				Out_PositionWS15_g170501 = Data15_g170501.PositionWS;
				Out_PositionWO15_g170501 = Data15_g170501.PositionWO;
				Out_PositionRawOS15_g170501 = Data15_g170501.PositionRawOS;
				Out_PositionAddOS15_g170501 = Data15_g170501.PositionAddOS;
				Out_PivotOS15_g170501 = Data15_g170501.PivotOS;
				Out_PivotWS15_g170501 = Data15_g170501.PivotWS;
				Out_PivotWO15_g170501 = Data15_g170501.PivotWO;
				Out_NormalOS15_g170501 = Data15_g170501.NormalOS;
				Out_NormalWS15_g170501 = Data15_g170501.NormalWS;
				Out_NormalRawOS15_g170501 = Data15_g170501.NormalRawOS;
				Out_NormalRawWS15_g170501 = Data15_g170501.NormalRawWS;
				Out_TangentOS15_g170501 = Data15_g170501.TangentOS;
				Out_ViewDirWS15_g170501 = Data15_g170501.ViewDirWS;
				Out_VertexData15_g170501 = Data15_g170501.VertexData;
				Out_PhaseData15_g170501 = Data15_g170501.PhaseData;
				Out_BoundsData15_g170501 = Data15_g170501.BoundsData;
				Out_RotationData15_g170501 = Data15_g170501.RotationData;
				}
				half3 Model_PositionOS147_g170500 = Out_PositionOS15_g170501;
				half3 VertexPos40_g170504 = Model_PositionOS147_g170500;
				float3 appendResult74_g170504 = (float3(VertexPos40_g170504.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170504 = appendResult74_g170504;
				float3 break84_g170504 = VertexPos40_g170504;
				float3 appendResult81_g170504 = (float3(0.0 , break84_g170504.y , break84_g170504.z));
				half3 VertexPosOtherAxis82_g170504 = appendResult81_g170504;
				float4 temp_output_1567_33_g170500 = Out_RotationData15_g170501;
				half4 Model_VertexBend1569_g170500 = temp_output_1567_33_g170500;
				float2 break1582_g170500 = (Model_VertexBend1569_g170500).xy;
				half Angle44_g170504 = break1582_g170500.y;
				half3 VertexPos40_g170507 = ( VertexPosRotationAxis50_g170504 + ( VertexPosOtherAxis82_g170504 * cos( Angle44_g170504 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170504 ) * sin( Angle44_g170504 ) ) );
				float3 appendResult74_g170507 = (float3(0.0 , 0.0 , VertexPos40_g170507.z));
				half3 VertexPosRotationAxis50_g170507 = appendResult74_g170507;
				float3 break84_g170507 = VertexPos40_g170507;
				float3 appendResult81_g170507 = (float3(break84_g170507.x , break84_g170507.y , 0.0));
				half3 VertexPosOtherAxis82_g170507 = appendResult81_g170507;
				half Angle44_g170507 = -break1582_g170500.x;
				float3 temp_output_1584_19_g170500 = ( VertexPosRotationAxis50_g170507 + ( VertexPosOtherAxis82_g170507 * cos( Angle44_g170507 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170507 ) * sin( Angle44_g170507 ) ) );
				float3 temp_output_6_0_g170506 = temp_output_1584_19_g170500;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch65_g170506 = Model_PositionOS147_g170500;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170506 = temp_output_6_0_g170506;
				#else
				float3 staticSwitch69_g170506 = staticSwitch65_g170506;
				#endif
				float3 temp_output_1585_0_g170500 = staticSwitch69_g170506;
				float3 temp_output_1567_31_g170500 = Out_PositionAddOS15_g170501;
				half3 Model_PositionADD1568_g170500 = temp_output_1567_31_g170500;
				half3 Final_PositionOS178_g170500 = ( temp_output_1585_0_g170500 + Model_PositionADD1568_g170500 );
				float3 In_PositionOS16_g170502 = Final_PositionOS178_g170500;
				float3 In_PositionWS16_g170502 = Out_PositionWS15_g170501;
				float3 In_PositionWO16_g170502 = Out_PositionWO15_g170501;
				float3 In_PositionRawOS16_g170502 = Out_PositionRawOS15_g170501;
				float3 In_PositionAddOS16_g170502 = temp_output_1567_31_g170500;
				float3 In_PivotOS16_g170502 = Out_PivotOS15_g170501;
				float3 In_PivotWS16_g170502 = Out_PivotWS15_g170501;
				float3 In_PivotWO16_g170502 = Out_PivotWO15_g170501;
				float3 In_NormalOS16_g170502 = Out_NormalOS15_g170501;
				float3 In_NormalWS16_g170502 = Out_NormalWS15_g170501;
				float3 In_NormalRawOS16_g170502 = Out_NormalRawOS15_g170501;
				float3 In_NormalRawWS16_g170502 = Out_NormalRawWS15_g170501;
				float4 In_TangentOS16_g170502 = Out_TangentOS15_g170501;
				float3 In_ViewDirWS16_g170502 = Out_ViewDirWS15_g170501;
				float4 In_VertexData16_g170502 = Out_VertexData15_g170501;
				float4 In_PhaseData16_g170502 = Out_PhaseData15_g170501;
				float4 In_BoundsData16_g170502 = Out_BoundsData15_g170501;
				float4 In_RotationData16_g170502 = temp_output_1567_33_g170500;
				{
				Data16_g170502.Dummy = In_Dummy16_g170502;
				Data16_g170502.PositionOS = In_PositionOS16_g170502;
				Data16_g170502.PositionWS = In_PositionWS16_g170502;
				Data16_g170502.PositionWO = In_PositionWO16_g170502;
				Data16_g170502.PositionRawOS = In_PositionRawOS16_g170502;
				Data16_g170502.PositionAddOS = In_PositionAddOS16_g170502;
				Data16_g170502.PivotOS = In_PivotOS16_g170502;
				Data16_g170502.PivotWS = In_PivotWS16_g170502;
				Data16_g170502.PivotWO = In_PivotWO16_g170502;
				Data16_g170502.NormalOS = In_NormalOS16_g170502;
				Data16_g170502.NormalWS = In_NormalWS16_g170502;
				Data16_g170502.NormalRawOS = In_NormalRawOS16_g170502;
				Data16_g170502.NormalRawWS = In_NormalRawWS16_g170502;
				Data16_g170502.TangentOS = In_TangentOS16_g170502;
				Data16_g170502.ViewDirWS = In_ViewDirWS16_g170502;
				Data16_g170502.VertexData = In_VertexData16_g170502;
				Data16_g170502.PhaseData = In_PhaseData16_g170502;
				Data16_g170502.BoundsData = In_BoundsData16_g170502;
				Data16_g170502.RotationData = In_RotationData16_g170502;
				}
				TVEModelData Data15_g170511 = Data16_g170502;
				float Out_Dummy15_g170511 = 0;
				float3 Out_PositionOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170511 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170511 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170511 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170511 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170511 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170511 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170511 = float3( 0,0,0 );
				float4 Out_VertexData15_g170511 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170511 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170511 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170511 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170511 = Data15_g170511.Dummy;
				Out_PositionOS15_g170511 = Data15_g170511.PositionOS;
				Out_PositionWS15_g170511 = Data15_g170511.PositionWS;
				Out_PositionWO15_g170511 = Data15_g170511.PositionWO;
				Out_PositionRawOS15_g170511 = Data15_g170511.PositionRawOS;
				Out_PositionAddOS15_g170511 = Data15_g170511.PositionAddOS;
				Out_PivotOS15_g170511 = Data15_g170511.PivotOS;
				Out_PivotWS15_g170511 = Data15_g170511.PivotWS;
				Out_PivotWO15_g170511 = Data15_g170511.PivotWO;
				Out_NormalOS15_g170511 = Data15_g170511.NormalOS;
				Out_NormalWS15_g170511 = Data15_g170511.NormalWS;
				Out_NormalRawOS15_g170511 = Data15_g170511.NormalRawOS;
				Out_NormalRawWS15_g170511 = Data15_g170511.NormalRawWS;
				Out_TangentOS15_g170511 = Data15_g170511.TangentOS;
				Out_ViewDirWS15_g170511 = Data15_g170511.ViewDirWS;
				Out_VertexData15_g170511 = Data15_g170511.VertexData;
				Out_PhaseData15_g170511 = Data15_g170511.PhaseData;
				Out_BoundsData15_g170511 = Data15_g170511.BoundsData;
				Out_RotationData15_g170511 = Data15_g170511.RotationData;
				}
				float3 In_PositionOS16_g170512 = Out_PositionOS15_g170511;
				float3 In_PositionWS16_g170512 = Out_PositionWS15_g170511;
				float3 In_PositionWO16_g170512 = Out_PositionWO15_g170511;
				float3 temp_output_1567_26_g170510 = Out_PositionRawOS15_g170511;
				float3 In_PositionRawOS16_g170512 = temp_output_1567_26_g170510;
				float3 In_PositionAddOS16_g170512 = Out_PositionAddOS15_g170511;
				float3 In_PivotOS16_g170512 = Out_PivotOS15_g170511;
				float3 In_PivotWS16_g170512 = Out_PivotWS15_g170511;
				float3 In_PivotWO16_g170512 = Out_PivotWO15_g170511;
				half3 Model_NormalOS1568_g170510 = Out_NormalOS15_g170511;
				float3 lerpResult1617_g170510 = lerp( Model_NormalOS1568_g170510 , half3( 0, 1, 0 ) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170510 = temp_output_1567_26_g170510;
				float3 normalizeResult1641_g170510 = ASESafeNormalize( ( Model_PositionRAW1592_g170510 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170510 = lerp( lerpResult1617_g170510 , normalizeResult1641_g170510 , _NormalSphereValue);
				float4 temp_output_1567_30_g170510 = Out_BoundsData15_g170511;
				half4 Model_VertexData1608_g170510 = temp_output_1567_30_g170510;
				float4 break1673_g170510 = Model_VertexData1608_g170510;
				float4 break33_g170513 = _normal_vert_mode;
				float temp_output_30_0_g170513 = ( break1673_g170510.x * break33_g170513.x );
				float temp_output_29_0_g170513 = ( break1673_g170510.y * break33_g170513.y );
				float temp_output_31_0_g170513 = ( break1673_g170510.z * break33_g170513.z );
				float temp_output_28_0_g170513 = ( temp_output_30_0_g170513 + temp_output_29_0_g170513 + temp_output_31_0_g170513 + ( break1673_g170510.w * break33_g170513.w ) );
				float clampResult17_g170515 = clamp( temp_output_28_0_g170513 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170514 = _NormalMeshRemap.x;
				float temp_output_9_0_g170514 = ( clampResult17_g170515 - temp_output_7_0_g170514 );
				float lerpResult1682_g170510 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170514 / ( _NormalMeshRemap.y - temp_output_7_0_g170514 ) ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170516 = lerpResult1682_g170510;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170516 = ( temp_output_6_0_g170516 + _NormalMeshMode );
				#else
				float staticSwitch14_g170516 = temp_output_6_0_g170516;
				#endif
				float temp_output_1679_0_g170510 = staticSwitch14_g170516;
				half Normal_MeskMask1684_g170510 = temp_output_1679_0_g170510;
				float3 lerpResult1667_g170510 = lerp( Model_NormalOS1568_g170510 , lerpResult1616_g170510 , Normal_MeskMask1684_g170510);
				#ifdef TVE_NORMAL
				float3 staticSwitch1700_g170510 = lerpResult1667_g170510;
				#else
				float3 staticSwitch1700_g170510 = Model_NormalOS1568_g170510;
				#endif
				half3 Final_NormalOS1666_g170510 = staticSwitch1700_g170510;
				float3 In_NormalOS16_g170512 = Final_NormalOS1666_g170510;
				float3 temp_output_1567_21_g170510 = Out_NormalWS15_g170511;
				float3 In_NormalWS16_g170512 = temp_output_1567_21_g170510;
				float3 In_NormalRawOS16_g170512 = Out_NormalRawOS15_g170511;
				float3 In_NormalRawWS16_g170512 = Out_NormalRawWS15_g170511;
				float4 In_TangentOS16_g170512 = Out_TangentOS15_g170511;
				float3 In_ViewDirWS16_g170512 = Out_ViewDirWS15_g170511;
				float4 In_VertexData16_g170512 = Out_VertexData15_g170511;
				float4 In_PhaseData16_g170512 = Out_PhaseData15_g170511;
				float4 In_BoundsData16_g170512 = temp_output_1567_30_g170510;
				float4 In_RotationData16_g170512 = Out_RotationData15_g170511;
				{
				Data16_g170512.Dummy = In_Dummy16_g170512;
				Data16_g170512.PositionOS = In_PositionOS16_g170512;
				Data16_g170512.PositionWS = In_PositionWS16_g170512;
				Data16_g170512.PositionWO = In_PositionWO16_g170512;
				Data16_g170512.PositionRawOS = In_PositionRawOS16_g170512;
				Data16_g170512.PositionAddOS = In_PositionAddOS16_g170512;
				Data16_g170512.PivotOS = In_PivotOS16_g170512;
				Data16_g170512.PivotWS = In_PivotWS16_g170512;
				Data16_g170512.PivotWO = In_PivotWO16_g170512;
				Data16_g170512.NormalOS = In_NormalOS16_g170512;
				Data16_g170512.NormalWS = In_NormalWS16_g170512;
				Data16_g170512.NormalRawOS = In_NormalRawOS16_g170512;
				Data16_g170512.NormalRawWS = In_NormalRawWS16_g170512;
				Data16_g170512.TangentOS = In_TangentOS16_g170512;
				Data16_g170512.ViewDirWS = In_ViewDirWS16_g170512;
				Data16_g170512.VertexData = In_VertexData16_g170512;
				Data16_g170512.PhaseData = In_PhaseData16_g170512;
				Data16_g170512.BoundsData = In_BoundsData16_g170512;
				Data16_g170512.RotationData = In_RotationData16_g170512;
				}
				TVEModelData Data15_g170618 = Data16_g170512;
				float Out_Dummy15_g170618 = 0;
				float3 Out_PositionOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170618 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170618 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170618 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170618 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170618 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170618 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170618 = float3( 0,0,0 );
				float4 Out_VertexData15_g170618 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170618 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170618 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170618 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170618 = Data15_g170618.Dummy;
				Out_PositionOS15_g170618 = Data15_g170618.PositionOS;
				Out_PositionWS15_g170618 = Data15_g170618.PositionWS;
				Out_PositionWO15_g170618 = Data15_g170618.PositionWO;
				Out_PositionRawOS15_g170618 = Data15_g170618.PositionRawOS;
				Out_PositionAddOS15_g170618 = Data15_g170618.PositionAddOS;
				Out_PivotOS15_g170618 = Data15_g170618.PivotOS;
				Out_PivotWS15_g170618 = Data15_g170618.PivotWS;
				Out_PivotWO15_g170618 = Data15_g170618.PivotWO;
				Out_NormalOS15_g170618 = Data15_g170618.NormalOS;
				Out_NormalWS15_g170618 = Data15_g170618.NormalWS;
				Out_NormalRawOS15_g170618 = Data15_g170618.NormalRawOS;
				Out_NormalRawWS15_g170618 = Data15_g170618.NormalRawWS;
				Out_TangentOS15_g170618 = Data15_g170618.TangentOS;
				Out_ViewDirWS15_g170618 = Data15_g170618.ViewDirWS;
				Out_VertexData15_g170618 = Data15_g170618.VertexData;
				Out_PhaseData15_g170618 = Data15_g170618.PhaseData;
				Out_BoundsData15_g170618 = Data15_g170618.BoundsData;
				Out_RotationData15_g170618 = Data15_g170618.RotationData;
				}
				float3 temp_output_217_24_g170617 = Out_PivotOS15_g170618;
				float3 In_PositionOS16_g170619 = ( Out_PositionOS15_g170618 + temp_output_217_24_g170617 );
				float3 In_PositionWS16_g170619 = Out_PositionWS15_g170618;
				float3 In_PositionWO16_g170619 = Out_PositionWO15_g170618;
				float3 In_PositionRawOS16_g170619 = Out_PositionRawOS15_g170618;
				float3 In_PositionAddOS16_g170619 = Out_PositionAddOS15_g170618;
				float3 In_PivotOS16_g170619 = temp_output_217_24_g170617;
				float3 In_PivotWS16_g170619 = Out_PivotWS15_g170618;
				float3 In_PivotWO16_g170619 = Out_PivotWO15_g170618;
				float3 In_NormalOS16_g170619 = Out_NormalOS15_g170618;
				float3 In_NormalWS16_g170619 = Out_NormalWS15_g170618;
				float3 In_NormalRawOS16_g170619 = Out_NormalRawOS15_g170618;
				float3 In_NormalRawWS16_g170619 = Out_NormalRawWS15_g170618;
				float4 In_TangentOS16_g170619 = Out_TangentOS15_g170618;
				float3 In_ViewDirWS16_g170619 = Out_ViewDirWS15_g170618;
				float4 In_VertexData16_g170619 = Out_VertexData15_g170618;
				float4 In_PhaseData16_g170619 = Out_PhaseData15_g170618;
				float4 In_BoundsData16_g170619 = Out_BoundsData15_g170618;
				float4 In_RotationData16_g170619 = Out_RotationData15_g170618;
				{
				Data16_g170619.Dummy = In_Dummy16_g170619;
				Data16_g170619.PositionOS = In_PositionOS16_g170619;
				Data16_g170619.PositionWS = In_PositionWS16_g170619;
				Data16_g170619.PositionWO = In_PositionWO16_g170619;
				Data16_g170619.PositionRawOS = In_PositionRawOS16_g170619;
				Data16_g170619.PositionAddOS = In_PositionAddOS16_g170619;
				Data16_g170619.PivotOS = In_PivotOS16_g170619;
				Data16_g170619.PivotWS = In_PivotWS16_g170619;
				Data16_g170619.PivotWO = In_PivotWO16_g170619;
				Data16_g170619.NormalOS = In_NormalOS16_g170619;
				Data16_g170619.NormalWS = In_NormalWS16_g170619;
				Data16_g170619.NormalRawOS = In_NormalRawOS16_g170619;
				Data16_g170619.NormalRawWS = In_NormalRawWS16_g170619;
				Data16_g170619.TangentOS = In_TangentOS16_g170619;
				Data16_g170619.ViewDirWS = In_ViewDirWS16_g170619;
				Data16_g170619.VertexData = In_VertexData16_g170619;
				Data16_g170619.PhaseData = In_PhaseData16_g170619;
				Data16_g170619.BoundsData = In_BoundsData16_g170619;
				Data16_g170619.RotationData = In_RotationData16_g170619;
				}
				TVEModelData Data15_g170630 = Data16_g170619;
				float Out_Dummy15_g170630 = 0;
				float3 Out_PositionOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170630 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170630 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170630 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170630 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170630 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170630 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170630 = float3( 0,0,0 );
				float4 Out_VertexData15_g170630 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170630 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170630 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_PositionOS15_g170630 = Data15_g170630.PositionOS;
				Out_PositionWS15_g170630 = Data15_g170630.PositionWS;
				Out_PositionWO15_g170630 = Data15_g170630.PositionWO;
				Out_PositionRawOS15_g170630 = Data15_g170630.PositionRawOS;
				Out_PositionAddOS15_g170630 = Data15_g170630.PositionAddOS;
				Out_PivotOS15_g170630 = Data15_g170630.PivotOS;
				Out_PivotWS15_g170630 = Data15_g170630.PivotWS;
				Out_PivotWO15_g170630 = Data15_g170630.PivotWO;
				Out_NormalOS15_g170630 = Data15_g170630.NormalOS;
				Out_NormalWS15_g170630 = Data15_g170630.NormalWS;
				Out_NormalRawOS15_g170630 = Data15_g170630.NormalRawOS;
				Out_NormalRawWS15_g170630 = Data15_g170630.NormalRawWS;
				Out_TangentOS15_g170630 = Data15_g170630.TangentOS;
				Out_ViewDirWS15_g170630 = Data15_g170630.ViewDirWS;
				Out_VertexData15_g170630 = Data15_g170630.VertexData;
				Out_PhaseData15_g170630 = Data15_g170630.PhaseData;
				Out_BoundsData15_g170630 = Data15_g170630.BoundsData;
				Out_RotationData15_g170630 = Data15_g170630.RotationData;
				}
				float3 temp_output_6_0_g170643 = ( Out_PositionOS15_g170630 + _DisableSRPBatcher );
				float2 uv_WetnessDropsTexRT = inputMesh.ase_texcoord.xy * _WetnessDropsTexRT_ST.xy + _WetnessDropsTexRT_ST.zw;
				float temp_output_371_0_g170552 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingGlobalValue + _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessGlobalValue + _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + ( _WetnessGlobalValue + _WetnessMeshValue + _WetnessMeshMode + _WetnessMeshRemap ) ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap + ( _WetnessWaterMeshValue + _WetnessWaterMeshMode + _WetnessWaterMeshRemap ) ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTexRT, sampler_WetnessDropsTexRT, uv_WetnessDropsTexRT, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + ( _WetnessDropsMeshValue + _WetnessDropsMeshMode + _WetnessDropsMeshRemap ) ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue + _CutoutGlobalValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityMinValue + _DitherProximityMaxValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeScaleValue1 ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) + temp_output_371_0_g170552 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170643 = ( temp_output_6_0_g170643 + Dummy_Data978.r );
				#else
				float3 staticSwitch14_g170643 = temp_output_6_0_g170643;
				#endif
				float3 temp_output_154_0_g170628 = staticSwitch14_g170643;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g156872;
				output.ase_texcoord6.xyz = vertexToFrag76_g156872;
				float temp_output_6_0_g170292 = ( _MotionHighlightValue * Motion_DistMask1820_g170256 * ( Tiny_Mask218_g170256 * Tiny_Mask218_g170256 ) * ( Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 * Motion_Wave2048_g170256 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Wave_Mask1026 = staticSwitch14_g170292;
				float4 appendResult23_g170409 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1026));
				float4 vertexToFrag24_g170409 = appendResult23_g170409;
				output.ase_texcoord7 = vertexToFrag24_g170409;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170628;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170630;
				inputMesh.tangentOS = Out_TangentOS15_g170630;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g170638 = ( 0.0 );
				float localBreakData4_g170633 = ( 0.0 );
				float localCompData3_g170622 = ( 0.0 );
				TVEVisualData Data3_g170622 = (TVEVisualData)0;
				half Dummy145_g170620 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170622 = Dummy145_g170620;
				float localBreakData4_g170621 = ( 0.0 );
				float localCompData3_g170542 = ( 0.0 );
				TVEVisualData Data3_g170542 = (TVEVisualData)0;
				half Dummy145_g170527 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170542 = Dummy145_g170527;
				float localBreakData4_g170531 = ( 0.0 );
				float localCompData3_g170476 = ( 0.0 );
				TVEVisualData Data3_g170476 = (TVEVisualData)0;
				float2 temp_cast_0 = (0.0).xx;
				half4 Dummy594_g170473 = ( ( _OverlayCategory + _OverlayEnd + _OverlayBakeMode ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTexRT, sampler_OverlayGlitterTexRT, temp_cast_0 ).r + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor.r + _OverlayGlitterDistValue + 0.0 + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) ) );
				float In_Dummy3_g170476 = Dummy594_g170473.r;
				float localBreakData4_g170474 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				float In_Dummy3_g170472 = 0.0;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170463 = ( 0.0 );
				TVEVisualData Data3_g170463 = (TVEVisualData)0;
				half Dummy220_g170460 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170463 = Dummy220_g170460;
				float localBreakData4_g170462 = ( 0.0 );
				float localCompData3_g170452 = ( 0.0 );
				TVEVisualData Data3_g170452 = (TVEVisualData)0;
				half Dummy202_g170450 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170452 = Dummy202_g170450;
				float localBreakData4_g170451 = ( 0.0 );
				float localCompData3_g170418 = ( 0.0 );
				TVEVisualData Data3_g170418 = (TVEVisualData)0;
				half4 Dummy944_g170410 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170418 = Dummy944_g170410.x;
				float localBreakData4_g170417 = ( 0.0 );
				float localCompData3_g170358 = ( 0.0 );
				TVEVisualData Data3_g170358 = (TVEVisualData)0;
				half4 Dummy946_g170340 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170358 = Dummy946_g170340.x;
				float localBreakData4_g170348 = ( 0.0 );
				float localCompData3_g170330 = ( 0.0 );
				TVEVisualData Data3_g170330 = (TVEVisualData)0;
				half4 Dummy130_g170319 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170330 = Dummy130_g170319.x;
				TEXTURE2D(Texture276_g170323) = _MainAlbedoTex;
				float localFilterTexture19_g170326 = ( 0.0 );
				SamplerState SS19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170326 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170326 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170326 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170326 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170326 = SamplerDefault19_g170326;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170326 = SamplerDefault19_g170326;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170326 = SamplerPoint19_g170326;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170326 = SamplerLow19_g170326;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170326 = SamplerMedium19_g170326;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170326 = SamplerHigh19_g170326;
				#endif
				}
				SamplerState Sampler276_g170323 = SS19_g170326;
				half4 Local_Coords180_g170319 = _main_coord_value;
				float4 temp_output_37_0_g170323 = Local_Coords180_g170319;
				half4 Coords276_g170323 = temp_output_37_0_g170323;
				half2 TexCoord276_g170323 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170323 = SampleMain( Texture276_g170323 , Sampler276_g170323 , Coords276_g170323 , TexCoord276_g170323 );
				TEXTURE2D(Texture275_g170323) = _MainAlbedoTex;
				SamplerState Sampler275_g170323 = SS19_g170326;
				half4 Coords275_g170323 = temp_output_37_0_g170323;
				half2 TexCoord275_g170323 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170323 = SampleExtra( Texture275_g170323 , Sampler275_g170323 , Coords275_g170323 , TexCoord275_g170323 );
				TEXTURE2D(Texture238_g170323) = _MainAlbedoTex;
				SamplerState Sampler238_g170323 = SS19_g170326;
				half4 Coords238_g170323 = temp_output_37_0_g170323;
				TVEModelData Data16_g156877 = (TVEModelData)0;
				float In_Dummy16_g156877 = 0.0;
				float3 vertexToFrag73_g156872 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156872 = vertexToFrag73_g156872;
				float3 In_PositionWS16_g156877 = PositionWS122_g156872;
				float3 vertexToFrag76_g156872 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156872 = vertexToFrag76_g156872;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156872 = ( PositionWS122_g156872 - PivotWS121_g156872 );
				#else
				float3 staticSwitch204_g156872 = PositionWS122_g156872;
				#endif
				half3 PositionWO132_g156872 = ( staticSwitch204_g156872 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156877 = PositionWO132_g156872;
				float3 In_PivotWS16_g156877 = PivotWS121_g156872;
				half3 PivotWO133_g156872 = ( PivotWS121_g156872 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156877 = PivotWO133_g156872;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g156872 = normalizedWorldNormal;
				float3 In_NormalWS16_g156877 = Normal_WS95_g156872;
				float3 normalizeResult296_g156872 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156872 ) );
				half3 ViewDirWS169_g156872 = normalizeResult296_g156872;
				float3 In_ViewDirWS16_g156877 = ViewDirWS169_g156872;
				half4 VertexMasks171_g156872 = packedInput.ase_color;
				float4 In_VertexData16_g156877 = VertexMasks171_g156872;
				float4 In_BoundsData16_g156877 = float4( 1,1,1,1 );
				{
				Data16_g156877.Dummy = In_Dummy16_g156877;
				Data16_g156877.PositionWS = In_PositionWS16_g156877;
				Data16_g156877.PositionWO = In_PositionWO16_g156877;
				Data16_g156877.PivotWS = In_PivotWS16_g156877;
				Data16_g156877.PivotWO = In_PivotWO16_g156877;
				Data16_g156877.NormalWS = In_NormalWS16_g156877;
				Data16_g156877.ViewDirWS = In_ViewDirWS16_g156877;
				Data16_g156877.VertexData = In_VertexData16_g156877;
				Data16_g156877.BoundsData = In_BoundsData16_g156877;
				}
				TVEModelData Data15_g170329 = Data16_g156877;
				float Out_Dummy15_g170329 = 0;
				float3 Out_PositionWS15_g170329 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170329 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170329 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170329 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170329 = float3( 0,0,0 );
				float4 Out_VertexData15_g170329 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170329 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170329 = Data15_g170329.Dummy;
				Out_PositionWS15_g170329 = Data15_g170329.PositionWS;
				Out_PositionWO15_g170329 = Data15_g170329.PositionWO;
				Out_PivotWS15_g170329 = Data15_g170329.PivotWS;
				Out_PivotWO15_g170329 = Data15_g170329.PivotWO;
				Out_NormalWS15_g170329 = Data15_g170329.NormalWS;
				Out_ViewDirWS15_g170329 = Data15_g170329.ViewDirWS;
				Out_VertexData15_g170329 = Data15_g170329.VertexData;
				Out_BoundsData15_g170329 = Data15_g170329.BoundsData;
				}
				half3 Model_PositionWO222_g170319 = Out_PositionWO15_g170329;
				float3 temp_output_279_0_g170323 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170323 = temp_output_279_0_g170323;
				half4 localSamplePlanar2D238_g170323 = SamplePlanar2D( Texture238_g170323 , Sampler238_g170323 , Coords238_g170323 , WorldPosition238_g170323 );
				TEXTURE2D(Texture246_g170323) = _MainAlbedoTex;
				SamplerState Sampler246_g170323 = SS19_g170326;
				half4 Coords246_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition246_g170323 = temp_output_279_0_g170323;
				half3 Model_NormalWS226_g170319 = Out_NormalWS15_g170329;
				float3 temp_output_280_0_g170323 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170323 = temp_output_280_0_g170323;
				half4 localSamplePlanar3D246_g170323 = SamplePlanar3D( Texture246_g170323 , Sampler246_g170323 , Coords246_g170323 , WorldPosition246_g170323 , WorldNormal246_g170323 );
				TEXTURE2D(Texture234_g170323) = _MainAlbedoTex;
				SamplerState Sampler234_g170323 = SS19_g170326;
				float4 Coords234_g170323 = temp_output_37_0_g170323;
				float3 WorldPosition234_g170323 = temp_output_279_0_g170323;
				float4 localSampleStochastic2D234_g170323 = SampleStochastic2D( Texture234_g170323 , Sampler234_g170323 , Coords234_g170323 , WorldPosition234_g170323 );
				TEXTURE2D(Texture263_g170323) = _MainAlbedoTex;
				SamplerState Sampler263_g170323 = SS19_g170326;
				half4 Coords263_g170323 = temp_output_37_0_g170323;
				half3 WorldPosition263_g170323 = temp_output_279_0_g170323;
				half3 WorldNormal263_g170323 = temp_output_280_0_g170323;
				half4 localSampleStochastic3D263_g170323 = SampleStochastic3D( Texture263_g170323 , Sampler263_g170323 , Coords263_g170323 , WorldPosition263_g170323 , WorldNormal263_g170323 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170319 = localSampleExtra275_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170319 = localSamplePlanar2D238_g170323;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170319 = localSamplePlanar3D246_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170319 = localSampleStochastic2D234_g170323;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170319 = localSampleStochastic3D263_g170323;
				#else
				float4 staticSwitch184_g170319 = localSampleMain276_g170323;
				#endif
				half4 Local_AlbedoTex185_g170319 = staticSwitch184_g170319;
				float3 lerpResult53_g170319 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170319).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170319 = lerpResult53_g170319;
				TEXTURE2D(Texture276_g170325) = _MainShaderTex;
				float localFilterTexture30_g170328 = ( 0.0 );
				SamplerState SS30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170328 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170328 = SamplerDefault30_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170328 = SamplerDefault30_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170328 = SamplerPoint30_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170328 = SamplerLow30_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170328 = SamplerMedium30_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170328 = SamplerHigh30_g170328;
				#endif
				}
				SamplerState Sampler276_g170325 = SS30_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170319;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainShaderTex;
				SamplerState Sampler275_g170325 = SS30_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainShaderTex;
				SamplerState Sampler238_g170325 = SS30_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainShaderTex;
				SamplerState Sampler246_g170325 = SS30_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainShaderTex;
				SamplerState Sampler234_g170325 = SS30_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainShaderTex;
				SamplerState Sampler263_g170325 = SS30_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170319 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170319 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170319 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170319 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170319 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch198_g170319 = localSampleMain276_g170325;
				#endif
				half4 Local_ShaderTex199_g170319 = staticSwitch198_g170319;
				float clampResult17_g170337 = clamp( (Local_ShaderTex199_g170319).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170336 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170336 = ( clampResult17_g170337 - temp_output_7_0_g170336 );
				float lerpResult23_g170319 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170336 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170319 = lerpResult23_g170319;
				float clampResult17_g170339 = clamp( (Local_ShaderTex199_g170319).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170338 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170338 = ( clampResult17_g170339 - temp_output_7_0_g170338 );
				half Local_Smoothness317_g170319 = ( saturate( ( ( temp_output_9_0_g170338 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170319 = (float4(( (Local_ShaderTex199_g170319).x * _MainMetallicValue ) , Local_Occlusion313_g170319 , (Local_ShaderTex199_g170319).z , Local_Smoothness317_g170319));
				half4 Local_Masks109_g170319 = appendResult73_g170319;
				float clampResult17_g170334 = clamp( (Local_Masks109_g170319).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170335 = _MainMultiRemap.x;
				float temp_output_9_0_g170335 = ( clampResult17_g170334 - temp_output_7_0_g170335 );
				half Local_MultiMask78_g170319 = saturate( ( ( temp_output_9_0_g170335 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170319 = lerp( 1.0 , Local_MultiMask78_g170319 , _MainColorMode);
				float4 lerpResult62_g170319 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170319);
				half3 Local_ColorRGB93_g170319 = (lerpResult62_g170319).rgb;
				half3 Local_Albedo139_g170319 = ( Local_AlbedoRGB107_g170319 * Local_ColorRGB93_g170319 );
				float3 In_Albedo3_g170330 = Local_Albedo139_g170319;
				float3 In_AlbedoRaw3_g170330 = Local_Albedo139_g170319;
				TEXTURE2D(Texture276_g170324) = _MainNormalTex;
				float localFilterTexture29_g170327 = ( 0.0 );
				SamplerState SS29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170327 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170327 = SamplerDefault29_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170327 = SamplerDefault29_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170327 = SamplerPoint29_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170327 = SamplerLow29_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170327 = SamplerMedium29_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170327 = SamplerHigh29_g170327;
				#endif
				}
				SamplerState Sampler276_g170324 = SS29_g170327;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170319;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainNormalTex;
				SamplerState Sampler275_g170324 = SS29_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainNormalTex;
				SamplerState Sampler238_g170324 = SS29_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170319;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainNormalTex;
				SamplerState Sampler246_g170324 = SS29_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170319;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainNormalTex;
				SamplerState Sampler234_g170324 = SS29_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainNormalTex;
				SamplerState Sampler263_g170324 = SS29_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170319 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170319 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170319 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170319 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170319 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch193_g170319 = localSampleMain276_g170324;
				#endif
				half4 Local_NormaTex191_g170319 = staticSwitch193_g170319;
				half4 Normal_Packed45_g170320 = Local_NormaTex191_g170319;
				float2 appendResult58_g170320 = (float2(( (Normal_Packed45_g170320).x * (Normal_Packed45_g170320).w ) , (Normal_Packed45_g170320).y));
				half2 Normal_Default50_g170320 = appendResult58_g170320;
				half2 Normal_ASTC41_g170320 = (Normal_Packed45_g170320).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170320 = Normal_ASTC41_g170320;
				#else
				float2 staticSwitch38_g170320 = Normal_Default50_g170320;
				#endif
				half2 Normal_NO_DTX544_g170320 = (Normal_Packed45_g170320).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170320 = Normal_NO_DTX544_g170320;
				#else
				float2 staticSwitch37_g170320 = staticSwitch38_g170320;
				#endif
				float2 temp_output_26_0_g170319 = ( (staticSwitch37_g170320*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170321 = temp_output_26_0_g170319;
				float2 break71_g170321 = Normal_Planar45_g170321;
				float3 appendResult72_g170321 = (float3(break71_g170321.x , 0.0 , break71_g170321.y));
				float2 temp_output_205_0_g170319 = (mul( ase_worldToTangent, appendResult72_g170321 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170319 = temp_output_205_0_g170319;
				#else
				float2 staticSwitch204_g170319 = temp_output_26_0_g170319;
				#endif
				half2 Local_NormalTS108_g170319 = staticSwitch204_g170319;
				float2 In_NormalTS3_g170330 = Local_NormalTS108_g170319;
				float3 appendResult68_g170322 = (float3(Local_NormalTS108_g170319 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170322 = appendResult68_g170322;
				float3 worldNormal74_g170322 = normalize( float3( dot( tanToWorld0, tanNormal74_g170322 ), dot( tanToWorld1, tanNormal74_g170322 ), dot( tanToWorld2, tanNormal74_g170322 ) ) );
				half3 Local_NormalWS250_g170319 = worldNormal74_g170322;
				float3 In_NormalWS3_g170330 = Local_NormalWS250_g170319;
				float4 In_Shader3_g170330 = Local_Masks109_g170319;
				float4 In_Emissive3_g170330 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170331 = Local_Albedo139_g170319;
				float dotResult20_g170331 = dot( temp_output_3_0_g170331 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170319 = dotResult20_g170331;
				float In_Grayscale3_g170330 = Local_Grayscale110_g170319;
				float clampResult144_g170319 = clamp( saturate( ( Local_Grayscale110_g170319 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170319 = clampResult144_g170319;
				float In_Luminosity3_g170330 = Local_Luminosity145_g170319;
				float In_MultiMask3_g170330 = Local_MultiMask78_g170319;
				float temp_output_187_0_g170319 = (Local_AlbedoTex185_g170319).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170319 = ( temp_output_187_0_g170319 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170319 = temp_output_187_0_g170319;
				#endif
				half Local_AlphaClip111_g170319 = staticSwitch236_g170319;
				float In_AlphaClip3_g170330 = Local_AlphaClip111_g170319;
				half Local_AlphaFade246_g170319 = (lerpResult62_g170319).a;
				float In_AlphaFade3_g170330 = Local_AlphaFade246_g170319;
				float3 temp_cast_6 = (1.0).xxx;
				float3 In_Translucency3_g170330 = temp_cast_6;
				float In_Transmission3_g170330 = 1.0;
				float In_Thickness3_g170330 = 0.0;
				float In_Diffusion3_g170330 = 0.0;
				float In_Depth3_g170330 = 0.0;
				{
				Data3_g170330.Dummy = In_Dummy3_g170330;
				Data3_g170330.Albedo = In_Albedo3_g170330;
				Data3_g170330.AlbedoRaw = In_AlbedoRaw3_g170330;
				Data3_g170330.NormalTS = In_NormalTS3_g170330;
				Data3_g170330.NormalWS = In_NormalWS3_g170330;
				Data3_g170330.Shader = In_Shader3_g170330;
				Data3_g170330.Emissive= In_Emissive3_g170330;
				Data3_g170330.MultiMask = In_MultiMask3_g170330;
				Data3_g170330.Grayscale = In_Grayscale3_g170330;
				Data3_g170330.Luminosity = In_Luminosity3_g170330;
				Data3_g170330.AlphaClip = In_AlphaClip3_g170330;
				Data3_g170330.AlphaFade = In_AlphaFade3_g170330;
				Data3_g170330.Translucency = In_Translucency3_g170330;
				Data3_g170330.Transmission = In_Transmission3_g170330;
				Data3_g170330.Thickness = In_Thickness3_g170330;
				Data3_g170330.Diffusion = In_Diffusion3_g170330;
				Data3_g170330.Depth = In_Depth3_g170330;
				}
				TVEVisualData Data4_g170348 = Data3_g170330;
				float Out_Dummy4_g170348 = 0;
				float3 Out_Albedo4_g170348 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170348 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170348 = float2( 0,0 );
				float3 Out_NormalWS4_g170348 = float3( 0,0,0 );
				float4 Out_Shader4_g170348 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170348 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170348 = 0;
				float Out_Grayscale4_g170348 = 0;
				float Out_Luminosity4_g170348 = 0;
				float Out_AlphaClip4_g170348 = 0;
				float Out_AlphaFade4_g170348 = 0;
				float3 Out_Translucency4_g170348 = float3( 0,0,0 );
				float Out_Transmission4_g170348 = 0;
				float Out_Thickness4_g170348 = 0;
				float Out_Diffusion4_g170348 = 0;
				float Out_Depth4_g170348 = 0;
				{
				Out_Dummy4_g170348 = Data4_g170348.Dummy;
				Out_Albedo4_g170348 = Data4_g170348.Albedo;
				Out_AlbedoRaw4_g170348 = Data4_g170348.AlbedoRaw;
				Out_NormalTS4_g170348 = Data4_g170348.NormalTS;
				Out_NormalWS4_g170348 = Data4_g170348.NormalWS;
				Out_Shader4_g170348 = Data4_g170348.Shader;
				Out_Emissive4_g170348= Data4_g170348.Emissive;
				Out_MultiMask4_g170348 = Data4_g170348.MultiMask;
				Out_Grayscale4_g170348 = Data4_g170348.Grayscale;
				Out_Luminosity4_g170348= Data4_g170348.Luminosity;
				Out_AlphaClip4_g170348 = Data4_g170348.AlphaClip;
				Out_AlphaFade4_g170348 = Data4_g170348.AlphaFade;
				Out_Translucency4_g170348 = Data4_g170348.Translucency;
				Out_Transmission4_g170348 = Data4_g170348.Transmission;
				Out_Thickness4_g170348 = Data4_g170348.Thickness;
				Out_Diffusion4_g170348 = Data4_g170348.Diffusion;
				Out_Depth4_g170348= Data4_g170348.Depth;
				}
				half3 Visual_Albedo527_g170340 = Out_Albedo4_g170348;
				TEXTURE2D(Texture276_g170341) = _SecondAlbedoTex;
				float localFilterTexture19_g170354 = ( 0.0 );
				SamplerState SS19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170354 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170354 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170354 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170354 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170354 = SamplerDefault19_g170354;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170354 = SamplerDefault19_g170354;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170354 = SamplerPoint19_g170354;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170354 = SamplerLow19_g170354;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170354 = SamplerMedium19_g170354;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170354 = SamplerHigh19_g170354;
				#endif
				}
				SamplerState Sampler276_g170341 = SS19_g170354;
				half4 Local_LayerCoords790_g170340 = _second_coord_value;
				float4 temp_output_37_0_g170341 = Local_LayerCoords790_g170340;
				half4 Coords276_g170341 = temp_output_37_0_g170341;
				half2 TexCoord276_g170341 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170341 = SampleMain( Texture276_g170341 , Sampler276_g170341 , Coords276_g170341 , TexCoord276_g170341 );
				TEXTURE2D(Texture275_g170341) = _SecondAlbedoTex;
				SamplerState Sampler275_g170341 = SS19_g170354;
				half4 Coords275_g170341 = temp_output_37_0_g170341;
				half2 TexCoord275_g170341 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170341 = SampleExtra( Texture275_g170341 , Sampler275_g170341 , Coords275_g170341 , TexCoord275_g170341 );
				TEXTURE2D(Texture238_g170341) = _SecondAlbedoTex;
				SamplerState Sampler238_g170341 = SS19_g170354;
				half4 Coords238_g170341 = temp_output_37_0_g170341;
				TVEModelData Data15_g170357 = Data16_g156877;
				float Out_Dummy15_g170357 = 0;
				float3 Out_PositionWS15_g170357 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170357 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170357 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170357 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170357 = float3( 0,0,0 );
				float4 Out_VertexData15_g170357 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170357 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170357 = Data15_g170357.Dummy;
				Out_PositionWS15_g170357 = Data15_g170357.PositionWS;
				Out_PositionWO15_g170357 = Data15_g170357.PositionWO;
				Out_PivotWS15_g170357 = Data15_g170357.PivotWS;
				Out_PivotWO15_g170357 = Data15_g170357.PivotWO;
				Out_NormalWS15_g170357 = Data15_g170357.NormalWS;
				Out_ViewDirWS15_g170357 = Data15_g170357.ViewDirWS;
				Out_VertexData15_g170357 = Data15_g170357.VertexData;
				Out_BoundsData15_g170357 = Data15_g170357.BoundsData;
				}
				half3 Model_PositionWO636_g170340 = Out_PositionWO15_g170357;
				float3 temp_output_279_0_g170341 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170341 = temp_output_279_0_g170341;
				half4 localSamplePlanar2D238_g170341 = SamplePlanar2D( Texture238_g170341 , Sampler238_g170341 , Coords238_g170341 , WorldPosition238_g170341 );
				TEXTURE2D(Texture246_g170341) = _SecondAlbedoTex;
				SamplerState Sampler246_g170341 = SS19_g170354;
				half4 Coords246_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition246_g170341 = temp_output_279_0_g170341;
				half3 Model_NormalWS869_g170340 = Out_NormalWS15_g170357;
				float3 temp_output_280_0_g170341 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170341 = temp_output_280_0_g170341;
				half4 localSamplePlanar3D246_g170341 = SamplePlanar3D( Texture246_g170341 , Sampler246_g170341 , Coords246_g170341 , WorldPosition246_g170341 , WorldNormal246_g170341 );
				TEXTURE2D(Texture234_g170341) = _SecondAlbedoTex;
				SamplerState Sampler234_g170341 = SS19_g170354;
				float4 Coords234_g170341 = temp_output_37_0_g170341;
				float3 WorldPosition234_g170341 = temp_output_279_0_g170341;
				float4 localSampleStochastic2D234_g170341 = SampleStochastic2D( Texture234_g170341 , Sampler234_g170341 , Coords234_g170341 , WorldPosition234_g170341 );
				TEXTURE2D(Texture263_g170341) = _SecondAlbedoTex;
				SamplerState Sampler263_g170341 = SS19_g170354;
				half4 Coords263_g170341 = temp_output_37_0_g170341;
				half3 WorldPosition263_g170341 = temp_output_279_0_g170341;
				half3 WorldNormal263_g170341 = temp_output_280_0_g170341;
				half4 localSampleStochastic3D263_g170341 = SampleStochastic3D( Texture263_g170341 , Sampler263_g170341 , Coords263_g170341 , WorldPosition263_g170341 , WorldNormal263_g170341 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170340 = localSampleExtra275_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170340 = localSamplePlanar2D238_g170341;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170340 = localSamplePlanar3D246_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170340 = localSampleStochastic2D234_g170341;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170340 = localSampleStochastic3D263_g170341;
				#else
				float4 staticSwitch693_g170340 = localSampleMain276_g170341;
				#endif
				half4 Local_AlbedoTex777_g170340 = staticSwitch693_g170340;
				float3 lerpResult716_g170340 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170340).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170340 = lerpResult716_g170340;
				TEXTURE2D(Texture276_g170343) = _SecondShaderTex;
				float localFilterTexture30_g170356 = ( 0.0 );
				SamplerState SS30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170356 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170356 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170356 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170356 = SamplerDefault30_g170356;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170356 = SamplerDefault30_g170356;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170356 = SamplerPoint30_g170356;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170356 = SamplerLow30_g170356;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170356 = SamplerMedium30_g170356;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170356 = SamplerHigh30_g170356;
				#endif
				}
				SamplerState Sampler276_g170343 = SS30_g170356;
				float4 temp_output_37_0_g170343 = Local_LayerCoords790_g170340;
				half4 Coords276_g170343 = temp_output_37_0_g170343;
				half2 TexCoord276_g170343 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170343 = SampleMain( Texture276_g170343 , Sampler276_g170343 , Coords276_g170343 , TexCoord276_g170343 );
				TEXTURE2D(Texture275_g170343) = _SecondShaderTex;
				SamplerState Sampler275_g170343 = SS30_g170356;
				half4 Coords275_g170343 = temp_output_37_0_g170343;
				half2 TexCoord275_g170343 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170343 = SampleExtra( Texture275_g170343 , Sampler275_g170343 , Coords275_g170343 , TexCoord275_g170343 );
				TEXTURE2D(Texture238_g170343) = _SecondShaderTex;
				SamplerState Sampler238_g170343 = SS30_g170356;
				half4 Coords238_g170343 = temp_output_37_0_g170343;
				float3 temp_output_279_0_g170343 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170343 = temp_output_279_0_g170343;
				half4 localSamplePlanar2D238_g170343 = SamplePlanar2D( Texture238_g170343 , Sampler238_g170343 , Coords238_g170343 , WorldPosition238_g170343 );
				TEXTURE2D(Texture246_g170343) = _SecondShaderTex;
				SamplerState Sampler246_g170343 = SS30_g170356;
				half4 Coords246_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition246_g170343 = temp_output_279_0_g170343;
				float3 temp_output_280_0_g170343 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170343 = temp_output_280_0_g170343;
				half4 localSamplePlanar3D246_g170343 = SamplePlanar3D( Texture246_g170343 , Sampler246_g170343 , Coords246_g170343 , WorldPosition246_g170343 , WorldNormal246_g170343 );
				TEXTURE2D(Texture234_g170343) = _SecondShaderTex;
				SamplerState Sampler234_g170343 = SS30_g170356;
				float4 Coords234_g170343 = temp_output_37_0_g170343;
				float3 WorldPosition234_g170343 = temp_output_279_0_g170343;
				float4 localSampleStochastic2D234_g170343 = SampleStochastic2D( Texture234_g170343 , Sampler234_g170343 , Coords234_g170343 , WorldPosition234_g170343 );
				TEXTURE2D(Texture263_g170343) = _SecondShaderTex;
				SamplerState Sampler263_g170343 = SS30_g170356;
				half4 Coords263_g170343 = temp_output_37_0_g170343;
				half3 WorldPosition263_g170343 = temp_output_279_0_g170343;
				half3 WorldNormal263_g170343 = temp_output_280_0_g170343;
				half4 localSampleStochastic3D263_g170343 = SampleStochastic3D( Texture263_g170343 , Sampler263_g170343 , Coords263_g170343 , WorldPosition263_g170343 , WorldNormal263_g170343 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170340 = localSampleExtra275_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170340 = localSamplePlanar2D238_g170343;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170340 = localSamplePlanar3D246_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170340 = localSampleStochastic2D234_g170343;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170340 = localSampleStochastic3D263_g170343;
				#else
				float4 staticSwitch722_g170340 = localSampleMain276_g170343;
				#endif
				half4 Local_ShaderTex775_g170340 = staticSwitch722_g170340;
				float clampResult17_g170374 = clamp( (Local_ShaderTex775_g170340).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170373 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170373 = ( clampResult17_g170374 - temp_output_7_0_g170373 );
				float lerpResult1058_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170373 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170340 = lerpResult1058_g170340;
				float clampResult17_g170376 = clamp( (Local_ShaderTex775_g170340).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170375 = ( clampResult17_g170376 - temp_output_7_0_g170375 );
				half Local_Smoothness1068_g170340 = ( saturate( ( ( temp_output_9_0_g170375 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170340 = (float4(( (Local_ShaderTex775_g170340).x * _SecondMetallicValue ) , Local_Occlusion1067_g170340 , (Local_ShaderTex775_g170340).z , Local_Smoothness1068_g170340));
				half4 Local_Masks750_g170340 = appendResult749_g170340;
				float clampResult17_g170377 = clamp( (Local_Masks750_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170380 = _SecondMultiRemap.x;
				float temp_output_9_0_g170380 = ( clampResult17_g170377 - temp_output_7_0_g170380 );
				float temp_output_765_0_g170340 = saturate( ( ( temp_output_9_0_g170380 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170340 = temp_output_765_0_g170340;
				float lerpResult705_g170340 = lerp( 1.0 , Local_MultiMask767_g170340 , _SecondColorMode);
				float4 lerpResult706_g170340 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170340);
				half3 Local_ColorRGB774_g170340 = (lerpResult706_g170340).rgb;
				half3 Local_Albedo768_g170340 = ( Local_AlbedoRGB771_g170340 * Local_ColorRGB774_g170340 );
				float3 lerpResult985_g170340 = lerp( Local_Albedo768_g170340 , ( Visual_Albedo527_g170340 * Local_Albedo768_g170340 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170344) = _SecondMaskTex;
				SamplerState Sampler276_g170344 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170340 = _second_mask_coord_value;
				float4 temp_output_37_0_g170344 = Local_BlendCoords813_g170340;
				half4 Coords276_g170344 = temp_output_37_0_g170344;
				half2 TexCoord276_g170344 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170344 = SampleMain( Texture276_g170344 , Sampler276_g170344 , Coords276_g170344 , TexCoord276_g170344 );
				TEXTURE2D(Texture275_g170344) = _SecondMaskTex;
				SamplerState Sampler275_g170344 = sampler_Linear_Repeat;
				half4 Coords275_g170344 = temp_output_37_0_g170344;
				half2 TexCoord275_g170344 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170344 = SampleExtra( Texture275_g170344 , Sampler275_g170344 , Coords275_g170344 , TexCoord275_g170344 );
				TEXTURE2D(Texture238_g170344) = _SecondMaskTex;
				SamplerState Sampler238_g170344 = sampler_Linear_Repeat;
				half4 Coords238_g170344 = temp_output_37_0_g170344;
				float3 temp_output_279_0_g170344 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170344 = temp_output_279_0_g170344;
				half4 localSamplePlanar2D238_g170344 = SamplePlanar2D( Texture238_g170344 , Sampler238_g170344 , Coords238_g170344 , WorldPosition238_g170344 );
				TEXTURE2D(Texture246_g170344) = _SecondMaskTex;
				SamplerState Sampler246_g170344 = sampler_Linear_Repeat;
				half4 Coords246_g170344 = temp_output_37_0_g170344;
				half3 WorldPosition246_g170344 = temp_output_279_0_g170344;
				float3 temp_output_280_0_g170344 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170344 = temp_output_280_0_g170344;
				half4 localSamplePlanar3D246_g170344 = SamplePlanar3D( Texture246_g170344 , Sampler246_g170344 , Coords246_g170344 , WorldPosition246_g170344 , WorldNormal246_g170344 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170340 = localSampleExtra275_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170340 = localSamplePlanar2D238_g170344;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170340 = localSamplePlanar3D246_g170344;
				#else
				float4 staticSwitch817_g170340 = localSampleMain276_g170344;
				#endif
				half4 Local_MaskTex861_g170340 = staticSwitch817_g170340;
				float clampResult17_g170360 = clamp( (Local_MaskTex861_g170340).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170364 = _SecondMaskRemap.x;
				float temp_output_9_0_g170364 = ( clampResult17_g170360 - temp_output_7_0_g170364 );
				float lerpResult1015_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170364 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170340 = lerpResult1015_g170340;
				half Visual_Luminosity1041_g170340 = Out_Luminosity4_g170348;
				float clampResult17_g170369 = clamp( Visual_Luminosity1041_g170340 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _SecondLumaRemap.x;
				float temp_output_9_0_g170370 = ( clampResult17_g170369 - temp_output_7_0_g170370 );
				float lerpResult1036_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170370 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170340 = lerpResult1036_g170340;
				half3 Visual_NormalWS951_g170340 = Out_NormalWS4_g170348;
				float clampResult17_g170365 = clamp( saturate( (Visual_NormalWS951_g170340).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170367 = _SecondProjRemap.x;
				float temp_output_9_0_g170367 = ( clampResult17_g170365 - temp_output_7_0_g170367 );
				float lerpResult996_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170367 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170340 = lerpResult996_g170340;
				half4 Model_VertexMasks964_g170340 = Out_VertexData15_g170357;
				float4 break965_g170340 = Model_VertexMasks964_g170340;
				float4 break33_g170361 = _second_vert_mode;
				float temp_output_30_0_g170361 = ( break965_g170340.x * break33_g170361.x );
				float temp_output_29_0_g170361 = ( break965_g170340.y * break33_g170361.y );
				float temp_output_31_0_g170361 = ( break965_g170340.z * break33_g170361.z );
				float temp_output_28_0_g170361 = ( temp_output_30_0_g170361 + temp_output_29_0_g170361 + temp_output_31_0_g170361 + ( break965_g170340.w * break33_g170361.w ) );
				float clampResult17_g170359 = clamp( temp_output_28_0_g170361 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170363 = _SecondMeshRemap.x;
				float temp_output_9_0_g170363 = ( clampResult17_g170359 - temp_output_7_0_g170363 );
				float lerpResult1017_g170340 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170363 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170362 = lerpResult1017_g170340;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170362 = ( temp_output_6_0_g170362 + _SecondMeshMode );
				#else
				float staticSwitch14_g170362 = temp_output_6_0_g170362;
				#endif
				half Blend_VertMask918_g170340 = staticSwitch14_g170362;
				float lerpResult1013_g170340 = lerp( 1.0 , TVE_CoatParams.z , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170340 = lerpResult1013_g170340;
				float clampResult17_g170366 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170340 * Blend_LumaMask1033_g170340 * Blend_ProjMask434_g170340 * Blend_VertMask918_g170340 * Blend_GlobalMask972_g170340 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondBlendRemap.x;
				float temp_output_9_0_g170368 = ( clampResult17_g170366 - temp_output_7_0_g170368 );
				half Blend_Mask412_g170340 = ( saturate( ( ( temp_output_9_0_g170368 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170340 = lerp( Visual_Albedo527_g170340 , lerpResult985_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170340 = lerpResult403_g170340;
				#else
				float3 staticSwitch415_g170340 = Visual_Albedo527_g170340;
				#endif
				half3 Final_Albedo601_g170340 = staticSwitch415_g170340;
				float3 In_Albedo3_g170358 = Final_Albedo601_g170340;
				float3 In_AlbedoRaw3_g170358 = Final_Albedo601_g170340;
				half2 Visual_NormalTS529_g170340 = Out_NormalTS4_g170348;
				float2 lerpResult40_g170349 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170340 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170342) = _SecondNormalTex;
				float localFilterTexture29_g170355 = ( 0.0 );
				SamplerState SS29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170355 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170355 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170355 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170355 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170355 = SamplerDefault29_g170355;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170355 = SamplerDefault29_g170355;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170355 = SamplerPoint29_g170355;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170355 = SamplerLow29_g170355;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170355 = SamplerMedium29_g170355;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170355 = SamplerHigh29_g170355;
				#endif
				}
				SamplerState Sampler276_g170342 = SS29_g170355;
				float4 temp_output_37_0_g170342 = Local_LayerCoords790_g170340;
				half4 Coords276_g170342 = temp_output_37_0_g170342;
				half2 TexCoord276_g170342 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170342 = SampleMain( Texture276_g170342 , Sampler276_g170342 , Coords276_g170342 , TexCoord276_g170342 );
				TEXTURE2D(Texture275_g170342) = _SecondNormalTex;
				SamplerState Sampler275_g170342 = SS29_g170355;
				half4 Coords275_g170342 = temp_output_37_0_g170342;
				half2 TexCoord275_g170342 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170342 = SampleExtra( Texture275_g170342 , Sampler275_g170342 , Coords275_g170342 , TexCoord275_g170342 );
				TEXTURE2D(Texture238_g170342) = _SecondNormalTex;
				SamplerState Sampler238_g170342 = SS29_g170355;
				half4 Coords238_g170342 = temp_output_37_0_g170342;
				float3 temp_output_279_0_g170342 = Model_PositionWO636_g170340;
				half3 WorldPosition238_g170342 = temp_output_279_0_g170342;
				half4 localSamplePlanar2D238_g170342 = SamplePlanar2D( Texture238_g170342 , Sampler238_g170342 , Coords238_g170342 , WorldPosition238_g170342 );
				TEXTURE2D(Texture246_g170342) = _SecondNormalTex;
				SamplerState Sampler246_g170342 = SS29_g170355;
				half4 Coords246_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition246_g170342 = temp_output_279_0_g170342;
				float3 temp_output_280_0_g170342 = Model_NormalWS869_g170340;
				half3 WorldNormal246_g170342 = temp_output_280_0_g170342;
				half4 localSamplePlanar3D246_g170342 = SamplePlanar3D( Texture246_g170342 , Sampler246_g170342 , Coords246_g170342 , WorldPosition246_g170342 , WorldNormal246_g170342 );
				TEXTURE2D(Texture234_g170342) = _SecondNormalTex;
				SamplerState Sampler234_g170342 = SS29_g170355;
				float4 Coords234_g170342 = temp_output_37_0_g170342;
				float3 WorldPosition234_g170342 = temp_output_279_0_g170342;
				float4 localSampleStochastic2D234_g170342 = SampleStochastic2D( Texture234_g170342 , Sampler234_g170342 , Coords234_g170342 , WorldPosition234_g170342 );
				TEXTURE2D(Texture263_g170342) = _SecondNormalTex;
				SamplerState Sampler263_g170342 = SS29_g170355;
				half4 Coords263_g170342 = temp_output_37_0_g170342;
				half3 WorldPosition263_g170342 = temp_output_279_0_g170342;
				half3 WorldNormal263_g170342 = temp_output_280_0_g170342;
				half4 localSampleStochastic3D263_g170342 = SampleStochastic3D( Texture263_g170342 , Sampler263_g170342 , Coords263_g170342 , WorldPosition263_g170342 , WorldNormal263_g170342 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170340 = localSampleExtra275_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170340 = localSamplePlanar2D238_g170342;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170340 = localSamplePlanar3D246_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170340 = localSampleStochastic2D234_g170342;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170340 = localSampleStochastic3D263_g170342;
				#else
				float4 staticSwitch698_g170340 = localSampleMain276_g170342;
				#endif
				half4 Local_NormalTex776_g170340 = staticSwitch698_g170340;
				half4 Normal_Packed45_g170345 = Local_NormalTex776_g170340;
				float2 appendResult58_g170345 = (float2(( (Normal_Packed45_g170345).x * (Normal_Packed45_g170345).w ) , (Normal_Packed45_g170345).y));
				half2 Normal_Default50_g170345 = appendResult58_g170345;
				half2 Normal_ASTC41_g170345 = (Normal_Packed45_g170345).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170345 = Normal_ASTC41_g170345;
				#else
				float2 staticSwitch38_g170345 = Normal_Default50_g170345;
				#endif
				half2 Normal_NO_DTX544_g170345 = (Normal_Packed45_g170345).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170345 = Normal_NO_DTX544_g170345;
				#else
				float2 staticSwitch37_g170345 = staticSwitch38_g170345;
				#endif
				float2 temp_output_724_0_g170340 = ( (staticSwitch37_g170345*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170346 = temp_output_724_0_g170340;
				float2 break71_g170346 = Normal_Planar45_g170346;
				float3 appendResult72_g170346 = (float3(break71_g170346.x , 0.0 , break71_g170346.y));
				float2 temp_output_858_0_g170340 = (mul( ase_worldToTangent, appendResult72_g170346 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170340 = temp_output_858_0_g170340;
				#else
				float2 staticSwitch727_g170340 = temp_output_724_0_g170340;
				#endif
				half2 Local_NormalTS729_g170340 = staticSwitch727_g170340;
				float2 temp_output_36_0_g170349 = ( lerpResult40_g170349 + Local_NormalTS729_g170340 );
				float2 lerpResult405_g170340 = lerp( Visual_NormalTS529_g170340 , temp_output_36_0_g170349 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170340 = lerpResult405_g170340;
				#else
				float2 staticSwitch418_g170340 = Visual_NormalTS529_g170340;
				#endif
				half2 Final_NormalTS612_g170340 = staticSwitch418_g170340;
				float2 In_NormalTS3_g170358 = Final_NormalTS612_g170340;
				float3 appendResult68_g170350 = (float3(Final_NormalTS612_g170340 , 1.0));
				float3 tanNormal74_g170350 = appendResult68_g170350;
				float3 worldNormal74_g170350 = normalize( float3( dot( tanToWorld0, tanNormal74_g170350 ), dot( tanToWorld1, tanNormal74_g170350 ), dot( tanToWorld2, tanNormal74_g170350 ) ) );
				half3 Final_NormalWS950_g170340 = worldNormal74_g170350;
				float3 In_NormalWS3_g170358 = Final_NormalWS950_g170340;
				half4 Visual_Shader531_g170340 = Out_Shader4_g170348;
				float4 lerpResult994_g170340 = lerp( Local_Masks750_g170340 , ( Visual_Shader531_g170340 * Local_Masks750_g170340 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170340 = lerp( Visual_Shader531_g170340 , lerpResult994_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170340 = lerpResult440_g170340;
				#else
				float4 staticSwitch451_g170340 = Visual_Shader531_g170340;
				#endif
				half4 Final_Masks613_g170340 = staticSwitch451_g170340;
				float4 In_Shader3_g170358 = Final_Masks613_g170340;
				float4 In_Emissive3_g170358 = Out_Emissive4_g170348;
				float3 temp_output_3_0_g170352 = Final_Albedo601_g170340;
				float dotResult20_g170352 = dot( temp_output_3_0_g170352 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170340 = dotResult20_g170352;
				float In_Grayscale3_g170358 = Final_Grayscale615_g170340;
				float clampResult651_g170340 = clamp( saturate( ( Final_Grayscale615_g170340 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170340 = clampResult651_g170340;
				float In_Luminosity3_g170358 = Final_Luminosity652_g170340;
				half Visual_MultiMask547_g170340 = Out_MultiMask4_g170348;
				float lerpResult477_g170340 = lerp( Visual_MultiMask547_g170340 , Local_MultiMask767_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch482_g170340 = lerpResult477_g170340;
				#else
				float staticSwitch482_g170340 = Visual_MultiMask547_g170340;
				#endif
				half Final_MultiMask572_g170340 = staticSwitch482_g170340;
				float In_MultiMask3_g170358 = Final_MultiMask572_g170340;
				half Visual_AlphaClip559_g170340 = Out_AlphaClip4_g170348;
				float temp_output_718_0_g170340 = (Local_AlbedoTex777_g170340).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170340 = ( temp_output_718_0_g170340 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170340 = temp_output_718_0_g170340;
				#endif
				half Local_AlphaClip772_g170340 = staticSwitch932_g170340;
				float lerpResult448_g170340 = lerp( Visual_AlphaClip559_g170340 , Local_AlphaClip772_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch564_g170340 = lerpResult448_g170340;
				#else
				float staticSwitch564_g170340 = Visual_AlphaClip559_g170340;
				#endif
				half Final_AlphaClip602_g170340 = staticSwitch564_g170340;
				float In_AlphaClip3_g170358 = Final_AlphaClip602_g170340;
				half Visual_AlphaFade588_g170340 = Out_AlphaFade4_g170348;
				half Local_AlphaFade773_g170340 = (lerpResult706_g170340).a;
				float lerpResult604_g170340 = lerp( Visual_AlphaFade588_g170340 , Local_AlphaFade773_g170340 , Blend_Mask412_g170340);
				#ifdef TVE_SECOND
				float staticSwitch608_g170340 = lerpResult604_g170340;
				#else
				float staticSwitch608_g170340 = Visual_AlphaFade588_g170340;
				#endif
				half Final_AlphaFade611_g170340 = staticSwitch608_g170340;
				float In_AlphaFade3_g170358 = Final_AlphaFade611_g170340;
				float3 In_Translucency3_g170358 = Out_Translucency4_g170348;
				float In_Transmission3_g170358 = Out_Transmission4_g170348;
				float In_Thickness3_g170358 = Out_Thickness4_g170348;
				float In_Diffusion3_g170358 = Out_Diffusion4_g170348;
				float In_Depth3_g170358 = Out_Depth4_g170348;
				{
				Data3_g170358.Dummy = In_Dummy3_g170358;
				Data3_g170358.Albedo = In_Albedo3_g170358;
				Data3_g170358.AlbedoRaw = In_AlbedoRaw3_g170358;
				Data3_g170358.NormalTS = In_NormalTS3_g170358;
				Data3_g170358.NormalWS = In_NormalWS3_g170358;
				Data3_g170358.Shader = In_Shader3_g170358;
				Data3_g170358.Emissive= In_Emissive3_g170358;
				Data3_g170358.MultiMask = In_MultiMask3_g170358;
				Data3_g170358.Grayscale = In_Grayscale3_g170358;
				Data3_g170358.Luminosity = In_Luminosity3_g170358;
				Data3_g170358.AlphaClip = In_AlphaClip3_g170358;
				Data3_g170358.AlphaFade = In_AlphaFade3_g170358;
				Data3_g170358.Translucency = In_Translucency3_g170358;
				Data3_g170358.Transmission = In_Transmission3_g170358;
				Data3_g170358.Thickness = In_Thickness3_g170358;
				Data3_g170358.Diffusion = In_Diffusion3_g170358;
				Data3_g170358.Depth = In_Depth3_g170358;
				}
				TVEVisualData Data4_g170417 = Data3_g170358;
				float Out_Dummy4_g170417 = 0;
				float3 Out_Albedo4_g170417 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170417 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170417 = float2( 0,0 );
				float3 Out_NormalWS4_g170417 = float3( 0,0,0 );
				float4 Out_Shader4_g170417 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170417 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170417 = 0;
				float Out_Grayscale4_g170417 = 0;
				float Out_Luminosity4_g170417 = 0;
				float Out_AlphaClip4_g170417 = 0;
				float Out_AlphaFade4_g170417 = 0;
				float3 Out_Translucency4_g170417 = float3( 0,0,0 );
				float Out_Transmission4_g170417 = 0;
				float Out_Thickness4_g170417 = 0;
				float Out_Diffusion4_g170417 = 0;
				float Out_Depth4_g170417 = 0;
				{
				Out_Dummy4_g170417 = Data4_g170417.Dummy;
				Out_Albedo4_g170417 = Data4_g170417.Albedo;
				Out_AlbedoRaw4_g170417 = Data4_g170417.AlbedoRaw;
				Out_NormalTS4_g170417 = Data4_g170417.NormalTS;
				Out_NormalWS4_g170417 = Data4_g170417.NormalWS;
				Out_Shader4_g170417 = Data4_g170417.Shader;
				Out_Emissive4_g170417= Data4_g170417.Emissive;
				Out_MultiMask4_g170417 = Data4_g170417.MultiMask;
				Out_Grayscale4_g170417 = Data4_g170417.Grayscale;
				Out_Luminosity4_g170417= Data4_g170417.Luminosity;
				Out_AlphaClip4_g170417 = Data4_g170417.AlphaClip;
				Out_AlphaFade4_g170417 = Data4_g170417.AlphaFade;
				Out_Translucency4_g170417 = Data4_g170417.Translucency;
				Out_Transmission4_g170417 = Data4_g170417.Transmission;
				Out_Thickness4_g170417 = Data4_g170417.Thickness;
				Out_Diffusion4_g170417 = Data4_g170417.Diffusion;
				Out_Depth4_g170417= Data4_g170417.Depth;
				}
				half3 Visual_Albedo527_g170410 = Out_Albedo4_g170417;
				TEXTURE2D(Texture276_g170411) = _ThirdAlbedoTex;
				float localFilterTexture19_g170426 = ( 0.0 );
				SamplerState SS19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170426 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170426 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170426 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170426 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170426 = SamplerDefault19_g170426;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170426 = SamplerDefault19_g170426;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170426 = SamplerPoint19_g170426;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170426 = SamplerLow19_g170426;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170426 = SamplerMedium19_g170426;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170426 = SamplerHigh19_g170426;
				#endif
				}
				SamplerState Sampler276_g170411 = SS19_g170426;
				half4 Local_LayerCoords790_g170410 = _third_coord_value;
				float4 temp_output_37_0_g170411 = Local_LayerCoords790_g170410;
				half4 Coords276_g170411 = temp_output_37_0_g170411;
				half2 TexCoord276_g170411 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170411 = SampleMain( Texture276_g170411 , Sampler276_g170411 , Coords276_g170411 , TexCoord276_g170411 );
				TEXTURE2D(Texture275_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170411 = SS19_g170426;
				half4 Coords275_g170411 = temp_output_37_0_g170411;
				half2 TexCoord275_g170411 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170411 = SampleExtra( Texture275_g170411 , Sampler275_g170411 , Coords275_g170411 , TexCoord275_g170411 );
				TEXTURE2D(Texture238_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170411 = SS19_g170426;
				half4 Coords238_g170411 = temp_output_37_0_g170411;
				TVEModelData Data15_g170429 = Data16_g156877;
				float Out_Dummy15_g170429 = 0;
				float3 Out_PositionWS15_g170429 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170429 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170429 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170429 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170429 = float3( 0,0,0 );
				float4 Out_VertexData15_g170429 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170429 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170429 = Data15_g170429.Dummy;
				Out_PositionWS15_g170429 = Data15_g170429.PositionWS;
				Out_PositionWO15_g170429 = Data15_g170429.PositionWO;
				Out_PivotWS15_g170429 = Data15_g170429.PivotWS;
				Out_PivotWO15_g170429 = Data15_g170429.PivotWO;
				Out_NormalWS15_g170429 = Data15_g170429.NormalWS;
				Out_ViewDirWS15_g170429 = Data15_g170429.ViewDirWS;
				Out_VertexData15_g170429 = Data15_g170429.VertexData;
				Out_BoundsData15_g170429 = Data15_g170429.BoundsData;
				}
				half3 Model_PositionWO636_g170410 = Out_PositionWO15_g170429;
				float3 temp_output_279_0_g170411 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170411 = temp_output_279_0_g170411;
				half4 localSamplePlanar2D238_g170411 = SamplePlanar2D( Texture238_g170411 , Sampler238_g170411 , Coords238_g170411 , WorldPosition238_g170411 );
				TEXTURE2D(Texture246_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170411 = SS19_g170426;
				half4 Coords246_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition246_g170411 = temp_output_279_0_g170411;
				half3 Model_NormalWS869_g170410 = Out_NormalWS15_g170429;
				float3 temp_output_280_0_g170411 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170411 = temp_output_280_0_g170411;
				half4 localSamplePlanar3D246_g170411 = SamplePlanar3D( Texture246_g170411 , Sampler246_g170411 , Coords246_g170411 , WorldPosition246_g170411 , WorldNormal246_g170411 );
				TEXTURE2D(Texture234_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170411 = SS19_g170426;
				float4 Coords234_g170411 = temp_output_37_0_g170411;
				float3 WorldPosition234_g170411 = temp_output_279_0_g170411;
				float4 localSampleStochastic2D234_g170411 = SampleStochastic2D( Texture234_g170411 , Sampler234_g170411 , Coords234_g170411 , WorldPosition234_g170411 );
				TEXTURE2D(Texture263_g170411) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170411 = SS19_g170426;
				half4 Coords263_g170411 = temp_output_37_0_g170411;
				half3 WorldPosition263_g170411 = temp_output_279_0_g170411;
				half3 WorldNormal263_g170411 = temp_output_280_0_g170411;
				half4 localSampleStochastic3D263_g170411 = SampleStochastic3D( Texture263_g170411 , Sampler263_g170411 , Coords263_g170411 , WorldPosition263_g170411 , WorldNormal263_g170411 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170410 = localSampleExtra275_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170410 = localSamplePlanar2D238_g170411;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170410 = localSamplePlanar3D246_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170410 = localSampleStochastic2D234_g170411;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170410 = localSampleStochastic3D263_g170411;
				#else
				float4 staticSwitch693_g170410 = localSampleMain276_g170411;
				#endif
				half4 Local_AlbedoTex777_g170410 = staticSwitch693_g170410;
				float3 lerpResult716_g170410 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170410).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170410 = lerpResult716_g170410;
				TEXTURE2D(Texture276_g170413) = _ThirdShaderTex;
				float localFilterTexture30_g170428 = ( 0.0 );
				SamplerState SS30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170428 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170428 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170428 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170428 = SamplerDefault30_g170428;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170428 = SamplerDefault30_g170428;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170428 = SamplerPoint30_g170428;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170428 = SamplerLow30_g170428;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170428 = SamplerMedium30_g170428;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170428 = SamplerHigh30_g170428;
				#endif
				}
				SamplerState Sampler276_g170413 = SS30_g170428;
				float4 temp_output_37_0_g170413 = Local_LayerCoords790_g170410;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				TEXTURE2D(Texture275_g170413) = _ThirdShaderTex;
				SamplerState Sampler275_g170413 = SS30_g170428;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				TEXTURE2D(Texture238_g170413) = _ThirdShaderTex;
				SamplerState Sampler238_g170413 = SS30_g170428;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				TEXTURE2D(Texture246_g170413) = _ThirdShaderTex;
				SamplerState Sampler246_g170413 = SS30_g170428;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				TEXTURE2D(Texture234_g170413) = _ThirdShaderTex;
				SamplerState Sampler234_g170413 = SS30_g170428;
				float4 Coords234_g170413 = temp_output_37_0_g170413;
				float3 WorldPosition234_g170413 = temp_output_279_0_g170413;
				float4 localSampleStochastic2D234_g170413 = SampleStochastic2D( Texture234_g170413 , Sampler234_g170413 , Coords234_g170413 , WorldPosition234_g170413 );
				TEXTURE2D(Texture263_g170413) = _ThirdShaderTex;
				SamplerState Sampler263_g170413 = SS30_g170428;
				half4 Coords263_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition263_g170413 = temp_output_279_0_g170413;
				half3 WorldNormal263_g170413 = temp_output_280_0_g170413;
				half4 localSampleStochastic3D263_g170413 = SampleStochastic3D( Texture263_g170413 , Sampler263_g170413 , Coords263_g170413 , WorldPosition263_g170413 , WorldNormal263_g170413 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170410 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170410 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170410 = localSamplePlanar3D246_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170410 = localSampleStochastic2D234_g170413;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170410 = localSampleStochastic3D263_g170413;
				#else
				float4 staticSwitch722_g170410 = localSampleMain276_g170413;
				#endif
				half4 Local_ShaderTex775_g170410 = staticSwitch722_g170410;
				float clampResult17_g170447 = clamp( (Local_ShaderTex775_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170446 = ( clampResult17_g170447 - temp_output_7_0_g170446 );
				float lerpResult1072_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170446 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170410 = lerpResult1072_g170410;
				float clampResult17_g170449 = clamp( (Local_ShaderTex775_g170410).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170448 = ( clampResult17_g170449 - temp_output_7_0_g170448 );
				half Local_Smoothness1085_g170410 = ( saturate( ( ( temp_output_9_0_g170448 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170410 = (float4(( (Local_ShaderTex775_g170410).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170410 , (Local_ShaderTex775_g170410).z , Local_Smoothness1085_g170410));
				half4 Local_Masks750_g170410 = appendResult749_g170410;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170410).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170445 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170445 = ( clampResult17_g170444 - temp_output_7_0_g170445 );
				float temp_output_765_0_g170410 = saturate( ( ( temp_output_9_0_g170445 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170410 = temp_output_765_0_g170410;
				float lerpResult705_g170410 = lerp( 1.0 , Local_MultiMask767_g170410 , _ThirdColorMode);
				float4 lerpResult706_g170410 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170410);
				half3 Local_ColorRGB774_g170410 = (lerpResult706_g170410).rgb;
				half3 Local_Albedo768_g170410 = ( Local_AlbedoRGB771_g170410 * Local_ColorRGB774_g170410 );
				float3 lerpResult985_g170410 = lerp( Local_Albedo768_g170410 , ( Visual_Albedo527_g170410 * Local_Albedo768_g170410 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170424) = _ThirdMaskTex;
				SamplerState Sampler276_g170424 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170410 = _third_mask_coord_value;
				float4 temp_output_37_0_g170424 = Local_MaskCoords813_g170410;
				half4 Coords276_g170424 = temp_output_37_0_g170424;
				half2 TexCoord276_g170424 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170424 = SampleMain( Texture276_g170424 , Sampler276_g170424 , Coords276_g170424 , TexCoord276_g170424 );
				TEXTURE2D(Texture275_g170424) = _ThirdMaskTex;
				SamplerState Sampler275_g170424 = sampler_Linear_Repeat;
				half4 Coords275_g170424 = temp_output_37_0_g170424;
				half2 TexCoord275_g170424 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170424 = SampleExtra( Texture275_g170424 , Sampler275_g170424 , Coords275_g170424 , TexCoord275_g170424 );
				TEXTURE2D(Texture238_g170424) = _ThirdMaskTex;
				SamplerState Sampler238_g170424 = sampler_Linear_Repeat;
				half4 Coords238_g170424 = temp_output_37_0_g170424;
				float3 temp_output_279_0_g170424 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170424 = temp_output_279_0_g170424;
				half4 localSamplePlanar2D238_g170424 = SamplePlanar2D( Texture238_g170424 , Sampler238_g170424 , Coords238_g170424 , WorldPosition238_g170424 );
				TEXTURE2D(Texture246_g170424) = _ThirdMaskTex;
				SamplerState Sampler246_g170424 = sampler_Linear_Repeat;
				half4 Coords246_g170424 = temp_output_37_0_g170424;
				half3 WorldPosition246_g170424 = temp_output_279_0_g170424;
				float3 temp_output_280_0_g170424 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170424 = temp_output_280_0_g170424;
				half4 localSamplePlanar3D246_g170424 = SamplePlanar3D( Texture246_g170424 , Sampler246_g170424 , Coords246_g170424 , WorldPosition246_g170424 , WorldNormal246_g170424 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170410 = localSampleExtra275_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170410 = localSamplePlanar2D238_g170424;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170410 = localSamplePlanar3D246_g170424;
				#else
				float4 staticSwitch817_g170410 = localSampleMain276_g170424;
				#endif
				half4 Local_MaskTex861_g170410 = staticSwitch817_g170410;
				float clampResult17_g170431 = clamp( (Local_MaskTex861_g170410).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170435 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170435 = ( clampResult17_g170431 - temp_output_7_0_g170435 );
				float lerpResult1028_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170435 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170410 = lerpResult1028_g170410;
				half Visual_Luminosity1049_g170410 = Out_Luminosity4_g170417;
				float clampResult17_g170440 = clamp( Visual_Luminosity1049_g170410 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170441 = ( clampResult17_g170440 - temp_output_7_0_g170441 );
				float lerpResult1040_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170441 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170410 = lerpResult1040_g170410;
				half4 Model_VertexMasks960_g170410 = Out_VertexData15_g170429;
				float4 break961_g170410 = Model_VertexMasks960_g170410;
				float4 break33_g170432 = _third_vert_mode;
				float temp_output_30_0_g170432 = ( break961_g170410.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break961_g170410.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break961_g170410.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break961_g170410.w * break33_g170432.w ) );
				float clampResult17_g170430 = clamp( temp_output_28_0_g170432 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170434 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170434 = ( clampResult17_g170430 - temp_output_7_0_g170434 );
				float lerpResult1026_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170434 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170433 = lerpResult1026_g170410;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half Blend_VertMask913_g170410 = staticSwitch14_g170433;
				half3 Visual_NormalWS953_g170410 = Out_NormalWS4_g170417;
				float clampResult17_g170436 = clamp( saturate( (Visual_NormalWS953_g170410).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _ThirdProjRemap.x;
				float temp_output_9_0_g170438 = ( clampResult17_g170436 - temp_output_7_0_g170438 );
				float lerpResult1004_g170410 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170438 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170410 = lerpResult1004_g170410;
				float lerpResult1060_g170410 = lerp( 1.0 , TVE_CoatParams.y , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170410 = lerpResult1060_g170410;
				float clampResult17_g170437 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170410 * Blend_LumaMask1046_g170410 * Blend_VertMask913_g170410 * Blend_ProjMask912_g170410 * Blend_GlobalMask968_g170410 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170439 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170439 = ( clampResult17_g170437 - temp_output_7_0_g170439 );
				half Detail_Mask412_g170410 = ( saturate( ( ( temp_output_9_0_g170439 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170410 = lerp( Visual_Albedo527_g170410 , lerpResult985_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170410 = lerpResult989_g170410;
				#else
				float3 staticSwitch415_g170410 = Visual_Albedo527_g170410;
				#endif
				half3 Final_Albedo601_g170410 = staticSwitch415_g170410;
				float3 In_Albedo3_g170418 = Final_Albedo601_g170410;
				float3 In_AlbedoRaw3_g170418 = Final_Albedo601_g170410;
				half2 Visual_NormalTS529_g170410 = Out_NormalTS4_g170417;
				float2 lerpResult40_g170420 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170410 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170412) = _ThirdNormalTex;
				float localFilterTexture29_g170427 = ( 0.0 );
				SamplerState SS29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170427 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170427 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170427 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170427 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170427 = SamplerDefault29_g170427;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170427 = SamplerDefault29_g170427;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170427 = SamplerPoint29_g170427;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170427 = SamplerLow29_g170427;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170427 = SamplerMedium29_g170427;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170427 = SamplerHigh29_g170427;
				#endif
				}
				SamplerState Sampler276_g170412 = SS29_g170427;
				float4 temp_output_37_0_g170412 = Local_LayerCoords790_g170410;
				half4 Coords276_g170412 = temp_output_37_0_g170412;
				half2 TexCoord276_g170412 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170412 = SampleMain( Texture276_g170412 , Sampler276_g170412 , Coords276_g170412 , TexCoord276_g170412 );
				TEXTURE2D(Texture275_g170412) = _ThirdNormalTex;
				SamplerState Sampler275_g170412 = SS29_g170427;
				half4 Coords275_g170412 = temp_output_37_0_g170412;
				half2 TexCoord275_g170412 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170412 = SampleExtra( Texture275_g170412 , Sampler275_g170412 , Coords275_g170412 , TexCoord275_g170412 );
				TEXTURE2D(Texture238_g170412) = _ThirdNormalTex;
				SamplerState Sampler238_g170412 = SS29_g170427;
				half4 Coords238_g170412 = temp_output_37_0_g170412;
				float3 temp_output_279_0_g170412 = Model_PositionWO636_g170410;
				half3 WorldPosition238_g170412 = temp_output_279_0_g170412;
				half4 localSamplePlanar2D238_g170412 = SamplePlanar2D( Texture238_g170412 , Sampler238_g170412 , Coords238_g170412 , WorldPosition238_g170412 );
				TEXTURE2D(Texture246_g170412) = _ThirdNormalTex;
				SamplerState Sampler246_g170412 = SS29_g170427;
				half4 Coords246_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition246_g170412 = temp_output_279_0_g170412;
				float3 temp_output_280_0_g170412 = Model_NormalWS869_g170410;
				half3 WorldNormal246_g170412 = temp_output_280_0_g170412;
				half4 localSamplePlanar3D246_g170412 = SamplePlanar3D( Texture246_g170412 , Sampler246_g170412 , Coords246_g170412 , WorldPosition246_g170412 , WorldNormal246_g170412 );
				TEXTURE2D(Texture234_g170412) = _ThirdNormalTex;
				SamplerState Sampler234_g170412 = SS29_g170427;
				float4 Coords234_g170412 = temp_output_37_0_g170412;
				float3 WorldPosition234_g170412 = temp_output_279_0_g170412;
				float4 localSampleStochastic2D234_g170412 = SampleStochastic2D( Texture234_g170412 , Sampler234_g170412 , Coords234_g170412 , WorldPosition234_g170412 );
				TEXTURE2D(Texture263_g170412) = _ThirdNormalTex;
				SamplerState Sampler263_g170412 = SS29_g170427;
				half4 Coords263_g170412 = temp_output_37_0_g170412;
				half3 WorldPosition263_g170412 = temp_output_279_0_g170412;
				half3 WorldNormal263_g170412 = temp_output_280_0_g170412;
				half4 localSampleStochastic3D263_g170412 = SampleStochastic3D( Texture263_g170412 , Sampler263_g170412 , Coords263_g170412 , WorldPosition263_g170412 , WorldNormal263_g170412 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170410 = localSampleExtra275_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170410 = localSamplePlanar2D238_g170412;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170410 = localSamplePlanar3D246_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170410 = localSampleStochastic2D234_g170412;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170410 = localSampleStochastic3D263_g170412;
				#else
				float4 staticSwitch698_g170410 = localSampleMain276_g170412;
				#endif
				half4 Local_NormalTex776_g170410 = staticSwitch698_g170410;
				half4 Normal_Packed45_g170414 = Local_NormalTex776_g170410;
				float2 appendResult58_g170414 = (float2(( (Normal_Packed45_g170414).x * (Normal_Packed45_g170414).w ) , (Normal_Packed45_g170414).y));
				half2 Normal_Default50_g170414 = appendResult58_g170414;
				half2 Normal_ASTC41_g170414 = (Normal_Packed45_g170414).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170414 = Normal_ASTC41_g170414;
				#else
				float2 staticSwitch38_g170414 = Normal_Default50_g170414;
				#endif
				half2 Normal_NO_DTX544_g170414 = (Normal_Packed45_g170414).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170414 = Normal_NO_DTX544_g170414;
				#else
				float2 staticSwitch37_g170414 = staticSwitch38_g170414;
				#endif
				float2 temp_output_724_0_g170410 = ( (staticSwitch37_g170414*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170415 = temp_output_724_0_g170410;
				float2 break71_g170415 = Normal_Planar45_g170415;
				float3 appendResult72_g170415 = (float3(break71_g170415.x , 0.0 , break71_g170415.y));
				float2 temp_output_858_0_g170410 = (mul( ase_worldToTangent, appendResult72_g170415 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170410 = temp_output_858_0_g170410;
				#else
				float2 staticSwitch727_g170410 = temp_output_724_0_g170410;
				#endif
				half2 Local_NormalTS729_g170410 = staticSwitch727_g170410;
				float2 temp_output_36_0_g170420 = ( lerpResult40_g170420 + Local_NormalTS729_g170410 );
				float2 lerpResult405_g170410 = lerp( Visual_NormalTS529_g170410 , temp_output_36_0_g170420 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170410 = lerpResult405_g170410;
				#else
				float2 staticSwitch418_g170410 = Visual_NormalTS529_g170410;
				#endif
				half2 Final_NormalTS612_g170410 = staticSwitch418_g170410;
				float2 In_NormalTS3_g170418 = Final_NormalTS612_g170410;
				float3 appendResult68_g170421 = (float3(Final_NormalTS612_g170410 , 1.0));
				float3 tanNormal74_g170421 = appendResult68_g170421;
				float3 worldNormal74_g170421 = normalize( float3( dot( tanToWorld0, tanNormal74_g170421 ), dot( tanToWorld1, tanNormal74_g170421 ), dot( tanToWorld2, tanNormal74_g170421 ) ) );
				half3 Final_NormalWS956_g170410 = worldNormal74_g170421;
				float3 In_NormalWS3_g170418 = Final_NormalWS956_g170410;
				half4 Visual_Shader531_g170410 = Out_Shader4_g170417;
				float4 lerpResult1000_g170410 = lerp( Local_Masks750_g170410 , ( Visual_Shader531_g170410 * Local_Masks750_g170410 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170410 = lerp( Visual_Shader531_g170410 , lerpResult1000_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170410 = lerpResult998_g170410;
				#else
				float4 staticSwitch451_g170410 = Visual_Shader531_g170410;
				#endif
				half4 Final_Masks613_g170410 = staticSwitch451_g170410;
				float4 In_Shader3_g170418 = Final_Masks613_g170410;
				float4 In_Emissive3_g170418 = Out_Emissive4_g170417;
				float3 temp_output_3_0_g170423 = Final_Albedo601_g170410;
				float dotResult20_g170423 = dot( temp_output_3_0_g170423 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170410 = dotResult20_g170423;
				float In_Grayscale3_g170418 = Final_Grayscale615_g170410;
				float clampResult651_g170410 = clamp( saturate( ( Final_Grayscale615_g170410 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170410 = clampResult651_g170410;
				float In_Luminosity3_g170418 = Final_Luminosity652_g170410;
				half Visual_MultiMask547_g170410 = Out_MultiMask4_g170417;
				float lerpResult477_g170410 = lerp( Visual_MultiMask547_g170410 , Local_MultiMask767_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch482_g170410 = lerpResult477_g170410;
				#else
				float staticSwitch482_g170410 = Visual_MultiMask547_g170410;
				#endif
				half Final_MultiMask572_g170410 = staticSwitch482_g170410;
				float In_MultiMask3_g170418 = Final_MultiMask572_g170410;
				half Visual_AlphaClip559_g170410 = Out_AlphaClip4_g170417;
				float temp_output_718_0_g170410 = (Local_AlbedoTex777_g170410).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170410 = ( temp_output_718_0_g170410 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170410 = temp_output_718_0_g170410;
				#endif
				half Local_AlphaClip772_g170410 = staticSwitch924_g170410;
				float lerpResult448_g170410 = lerp( Visual_AlphaClip559_g170410 , Local_AlphaClip772_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch564_g170410 = lerpResult448_g170410;
				#else
				float staticSwitch564_g170410 = Visual_AlphaClip559_g170410;
				#endif
				half Final_AlphaClip602_g170410 = staticSwitch564_g170410;
				float In_AlphaClip3_g170418 = Final_AlphaClip602_g170410;
				half Visual_AlphaFade588_g170410 = Out_AlphaFade4_g170417;
				half Local_AlphaFade773_g170410 = (lerpResult706_g170410).a;
				float lerpResult604_g170410 = lerp( Visual_AlphaFade588_g170410 , Local_AlphaFade773_g170410 , Detail_Mask412_g170410);
				#ifdef TVE_THIRD
				float staticSwitch608_g170410 = lerpResult604_g170410;
				#else
				float staticSwitch608_g170410 = Visual_AlphaFade588_g170410;
				#endif
				half Final_AlphaFade611_g170410 = staticSwitch608_g170410;
				float In_AlphaFade3_g170418 = Final_AlphaFade611_g170410;
				float3 In_Translucency3_g170418 = Out_Translucency4_g170417;
				float In_Transmission3_g170418 = Out_Transmission4_g170417;
				float In_Thickness3_g170418 = Out_Thickness4_g170417;
				float In_Diffusion3_g170418 = Out_Diffusion4_g170417;
				float In_Depth3_g170418 = Out_Depth4_g170417;
				{
				Data3_g170418.Dummy = In_Dummy3_g170418;
				Data3_g170418.Albedo = In_Albedo3_g170418;
				Data3_g170418.AlbedoRaw = In_AlbedoRaw3_g170418;
				Data3_g170418.NormalTS = In_NormalTS3_g170418;
				Data3_g170418.NormalWS = In_NormalWS3_g170418;
				Data3_g170418.Shader = In_Shader3_g170418;
				Data3_g170418.Emissive= In_Emissive3_g170418;
				Data3_g170418.MultiMask = In_MultiMask3_g170418;
				Data3_g170418.Grayscale = In_Grayscale3_g170418;
				Data3_g170418.Luminosity = In_Luminosity3_g170418;
				Data3_g170418.AlphaClip = In_AlphaClip3_g170418;
				Data3_g170418.AlphaFade = In_AlphaFade3_g170418;
				Data3_g170418.Translucency = In_Translucency3_g170418;
				Data3_g170418.Transmission = In_Transmission3_g170418;
				Data3_g170418.Thickness = In_Thickness3_g170418;
				Data3_g170418.Diffusion = In_Diffusion3_g170418;
				Data3_g170418.Depth = In_Depth3_g170418;
				}
				TVEVisualData Data4_g170451 = Data3_g170418;
				float Out_Dummy4_g170451 = 0;
				float3 Out_Albedo4_g170451 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170451 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170451 = float2( 0,0 );
				float3 Out_NormalWS4_g170451 = float3( 0,0,0 );
				float4 Out_Shader4_g170451 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170451 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170451 = 0;
				float Out_Grayscale4_g170451 = 0;
				float Out_Luminosity4_g170451 = 0;
				float Out_AlphaClip4_g170451 = 0;
				float Out_AlphaFade4_g170451 = 0;
				float3 Out_Translucency4_g170451 = float3( 0,0,0 );
				float Out_Transmission4_g170451 = 0;
				float Out_Thickness4_g170451 = 0;
				float Out_Diffusion4_g170451 = 0;
				float Out_Depth4_g170451 = 0;
				{
				Out_Dummy4_g170451 = Data4_g170451.Dummy;
				Out_Albedo4_g170451 = Data4_g170451.Albedo;
				Out_AlbedoRaw4_g170451 = Data4_g170451.AlbedoRaw;
				Out_NormalTS4_g170451 = Data4_g170451.NormalTS;
				Out_NormalWS4_g170451 = Data4_g170451.NormalWS;
				Out_Shader4_g170451 = Data4_g170451.Shader;
				Out_Emissive4_g170451= Data4_g170451.Emissive;
				Out_MultiMask4_g170451 = Data4_g170451.MultiMask;
				Out_Grayscale4_g170451 = Data4_g170451.Grayscale;
				Out_Luminosity4_g170451= Data4_g170451.Luminosity;
				Out_AlphaClip4_g170451 = Data4_g170451.AlphaClip;
				Out_AlphaFade4_g170451 = Data4_g170451.AlphaFade;
				Out_Translucency4_g170451 = Data4_g170451.Translucency;
				Out_Transmission4_g170451 = Data4_g170451.Transmission;
				Out_Thickness4_g170451 = Data4_g170451.Thickness;
				Out_Diffusion4_g170451 = Data4_g170451.Diffusion;
				Out_Depth4_g170451= Data4_g170451.Depth;
				}
				half3 Visual_Albedo127_g170450 = Out_Albedo4_g170451;
				TVEModelData Data15_g170458 = Data16_g156877;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half4 Model_VertexData206_g170450 = Out_VertexData15_g170458;
				float4 break208_g170450 = Model_VertexData206_g170450;
				float4 break33_g170456 = _occlusion_vert_mode;
				float temp_output_30_0_g170456 = ( break208_g170450.x * break33_g170456.x );
				float temp_output_29_0_g170456 = ( break208_g170450.y * break33_g170456.y );
				float temp_output_31_0_g170456 = ( break208_g170450.z * break33_g170456.z );
				float temp_output_28_0_g170456 = ( temp_output_30_0_g170456 + temp_output_29_0_g170456 + temp_output_31_0_g170456 + ( break208_g170450.w * break33_g170456.w ) );
				float temp_output_194_0_g170450 = temp_output_28_0_g170456;
				float clampResult17_g170454 = clamp( temp_output_194_0_g170450 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170454 - temp_output_7_0_g170459 );
				float temp_output_6_0_g170455 = saturate( ( ( temp_output_9_0_g170459 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170455 = ( temp_output_6_0_g170455 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170455 = temp_output_6_0_g170455;
				#endif
				half Occlusion_Mask82_g170450 = staticSwitch14_g170455;
				float3 lerpResult75_g170450 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170450);
				float3 lerpResult186_g170450 = lerp( Visual_Albedo127_g170450 , ( Visual_Albedo127_g170450 * lerpResult75_g170450 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170450 = lerpResult186_g170450;
				#else
				float3 staticSwitch171_g170450 = Visual_Albedo127_g170450;
				#endif
				half3 Final_Albedo160_g170450 = staticSwitch171_g170450;
				float3 In_Albedo3_g170452 = Final_Albedo160_g170450;
				float3 In_AlbedoRaw3_g170452 = Final_Albedo160_g170450;
				float2 In_NormalTS3_g170452 = Out_NormalTS4_g170451;
				float3 In_NormalWS3_g170452 = Out_NormalWS4_g170451;
				float4 In_Shader3_g170452 = Out_Shader4_g170451;
				float4 In_Emissive3_g170452 = Out_Emissive4_g170451;
				float3 temp_output_3_0_g170453 = Final_Albedo160_g170450;
				float dotResult20_g170453 = dot( temp_output_3_0_g170453 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170450 = dotResult20_g170453;
				float In_Grayscale3_g170452 = Final_Grayscale164_g170450;
				float clampResult180_g170450 = clamp( saturate( ( Final_Grayscale164_g170450 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170450 = clampResult180_g170450;
				float In_Luminosity3_g170452 = Final_Shading181_g170450;
				float In_MultiMask3_g170452 = Out_MultiMask4_g170451;
				float In_AlphaClip3_g170452 = Out_AlphaClip4_g170451;
				float In_AlphaFade3_g170452 = Out_AlphaFade4_g170451;
				float3 In_Translucency3_g170452 = Out_Translucency4_g170451;
				float In_Transmission3_g170452 = Out_Transmission4_g170451;
				float In_Thickness3_g170452 = Out_Thickness4_g170451;
				float In_Diffusion3_g170452 = Out_Diffusion4_g170451;
				float In_Depth3_g170452 = Out_Depth4_g170451;
				{
				Data3_g170452.Dummy = In_Dummy3_g170452;
				Data3_g170452.Albedo = In_Albedo3_g170452;
				Data3_g170452.AlbedoRaw = In_AlbedoRaw3_g170452;
				Data3_g170452.NormalTS = In_NormalTS3_g170452;
				Data3_g170452.NormalWS = In_NormalWS3_g170452;
				Data3_g170452.Shader = In_Shader3_g170452;
				Data3_g170452.Emissive= In_Emissive3_g170452;
				Data3_g170452.MultiMask = In_MultiMask3_g170452;
				Data3_g170452.Grayscale = In_Grayscale3_g170452;
				Data3_g170452.Luminosity = In_Luminosity3_g170452;
				Data3_g170452.AlphaClip = In_AlphaClip3_g170452;
				Data3_g170452.AlphaFade = In_AlphaFade3_g170452;
				Data3_g170452.Translucency = In_Translucency3_g170452;
				Data3_g170452.Transmission = In_Transmission3_g170452;
				Data3_g170452.Thickness = In_Thickness3_g170452;
				Data3_g170452.Diffusion = In_Diffusion3_g170452;
				Data3_g170452.Depth = In_Depth3_g170452;
				}
				TVEVisualData Data4_g170462 = Data3_g170452;
				float Out_Dummy4_g170462 = 0;
				float3 Out_Albedo4_g170462 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170462 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170462 = float2( 0,0 );
				float3 Out_NormalWS4_g170462 = float3( 0,0,0 );
				float4 Out_Shader4_g170462 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170462 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170462 = 0;
				float Out_Grayscale4_g170462 = 0;
				float Out_Luminosity4_g170462 = 0;
				float Out_AlphaClip4_g170462 = 0;
				float Out_AlphaFade4_g170462 = 0;
				float3 Out_Translucency4_g170462 = float3( 0,0,0 );
				float Out_Transmission4_g170462 = 0;
				float Out_Thickness4_g170462 = 0;
				float Out_Diffusion4_g170462 = 0;
				float Out_Depth4_g170462 = 0;
				{
				Out_Dummy4_g170462 = Data4_g170462.Dummy;
				Out_Albedo4_g170462 = Data4_g170462.Albedo;
				Out_AlbedoRaw4_g170462 = Data4_g170462.AlbedoRaw;
				Out_NormalTS4_g170462 = Data4_g170462.NormalTS;
				Out_NormalWS4_g170462 = Data4_g170462.NormalWS;
				Out_Shader4_g170462 = Data4_g170462.Shader;
				Out_Emissive4_g170462= Data4_g170462.Emissive;
				Out_MultiMask4_g170462 = Data4_g170462.MultiMask;
				Out_Grayscale4_g170462 = Data4_g170462.Grayscale;
				Out_Luminosity4_g170462= Data4_g170462.Luminosity;
				Out_AlphaClip4_g170462 = Data4_g170462.AlphaClip;
				Out_AlphaFade4_g170462 = Data4_g170462.AlphaFade;
				Out_Translucency4_g170462 = Data4_g170462.Translucency;
				Out_Transmission4_g170462 = Data4_g170462.Transmission;
				Out_Thickness4_g170462 = Data4_g170462.Thickness;
				Out_Diffusion4_g170462 = Data4_g170462.Diffusion;
				Out_Depth4_g170462= Data4_g170462.Depth;
				}
				half3 Visual_Albedo127_g170460 = Out_Albedo4_g170462;
				TVEModelData Data15_g170468 = Data16_g156877;
				float Out_Dummy15_g170468 = 0;
				float3 Out_PositionWS15_g170468 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170468 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170468 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170468 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170468 = float3( 0,0,0 );
				float4 Out_VertexData15_g170468 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170468 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170468 = Data15_g170468.Dummy;
				Out_PositionWS15_g170468 = Data15_g170468.PositionWS;
				Out_PositionWO15_g170468 = Data15_g170468.PositionWO;
				Out_PivotWS15_g170468 = Data15_g170468.PivotWS;
				Out_PivotWO15_g170468 = Data15_g170468.PivotWO;
				Out_NormalWS15_g170468 = Data15_g170468.NormalWS;
				Out_ViewDirWS15_g170468 = Data15_g170468.ViewDirWS;
				Out_VertexData15_g170468 = Data15_g170468.VertexData;
				Out_BoundsData15_g170468 = Data15_g170468.BoundsData;
				}
				half4 Model_VertexData224_g170460 = Out_VertexData15_g170468;
				float4 break226_g170460 = Model_VertexData224_g170460;
				float4 break33_g170461 = _gradient_vert_mode;
				float temp_output_30_0_g170461 = ( break226_g170460.x * break33_g170461.x );
				float temp_output_29_0_g170461 = ( break226_g170460.y * break33_g170461.y );
				float temp_output_31_0_g170461 = ( break226_g170460.z * break33_g170461.z );
				float temp_output_28_0_g170461 = ( temp_output_30_0_g170461 + temp_output_29_0_g170461 + temp_output_31_0_g170461 + ( break226_g170460.w * break33_g170461.w ) );
				float temp_output_211_0_g170460 = temp_output_28_0_g170461;
				float clampResult17_g170466 = clamp( temp_output_211_0_g170460 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _GradientMeshRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170466 - temp_output_7_0_g170469 );
				float temp_output_6_0_g170467 = saturate( ( ( temp_output_9_0_g170469 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + _GradientMeshMode );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				half Gradient_VertMask82_g170460 = staticSwitch14_g170467;
				half Gradient_Mask200_g170460 = Gradient_VertMask82_g170460;
				float3 lerpResult75_g170460 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170460);
				float temp_output_162_11_g170460 = Out_MultiMask4_g170462;
				half Visual_MultiMask196_g170460 = temp_output_162_11_g170460;
				float lerpResult190_g170460 = lerp( 1.0 , Visual_MultiMask196_g170460 , _GradientMultiValue);
				half Gradient_MultiMask194_g170460 = lerpResult190_g170460;
				float3 lerpResult186_g170460 = lerp( Visual_Albedo127_g170460 , ( Visual_Albedo127_g170460 * lerpResult75_g170460 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170460 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170460 = lerpResult186_g170460;
				#else
				float3 staticSwitch171_g170460 = Visual_Albedo127_g170460;
				#endif
				half3 Final_Albedo160_g170460 = staticSwitch171_g170460;
				float3 In_Albedo3_g170463 = Final_Albedo160_g170460;
				float3 In_AlbedoRaw3_g170463 = Final_Albedo160_g170460;
				float2 In_NormalTS3_g170463 = Out_NormalTS4_g170462;
				float3 In_NormalWS3_g170463 = Out_NormalWS4_g170462;
				float4 In_Shader3_g170463 = Out_Shader4_g170462;
				float4 In_Emissive3_g170463 = Out_Emissive4_g170462;
				float3 temp_output_3_0_g170464 = Final_Albedo160_g170460;
				float dotResult20_g170464 = dot( temp_output_3_0_g170464 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170460 = dotResult20_g170464;
				float In_Grayscale3_g170463 = Final_Grayscale164_g170460;
				float clampResult180_g170460 = clamp( saturate( ( Final_Grayscale164_g170460 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170460 = clampResult180_g170460;
				float In_Luminosity3_g170463 = Final_Luminosity181_g170460;
				float In_MultiMask3_g170463 = temp_output_162_11_g170460;
				float In_AlphaClip3_g170463 = Out_AlphaClip4_g170462;
				float In_AlphaFade3_g170463 = Out_AlphaFade4_g170462;
				float3 In_Translucency3_g170463 = Out_Translucency4_g170462;
				float In_Transmission3_g170463 = Out_Transmission4_g170462;
				float In_Thickness3_g170463 = Out_Thickness4_g170462;
				float In_Diffusion3_g170463 = Out_Diffusion4_g170462;
				float In_Depth3_g170463 = Out_Depth4_g170462;
				{
				Data3_g170463.Dummy = In_Dummy3_g170463;
				Data3_g170463.Albedo = In_Albedo3_g170463;
				Data3_g170463.AlbedoRaw = In_AlbedoRaw3_g170463;
				Data3_g170463.NormalTS = In_NormalTS3_g170463;
				Data3_g170463.NormalWS = In_NormalWS3_g170463;
				Data3_g170463.Shader = In_Shader3_g170463;
				Data3_g170463.Emissive= In_Emissive3_g170463;
				Data3_g170463.MultiMask = In_MultiMask3_g170463;
				Data3_g170463.Grayscale = In_Grayscale3_g170463;
				Data3_g170463.Luminosity = In_Luminosity3_g170463;
				Data3_g170463.AlphaClip = In_AlphaClip3_g170463;
				Data3_g170463.AlphaFade = In_AlphaFade3_g170463;
				Data3_g170463.Translucency = In_Translucency3_g170463;
				Data3_g170463.Transmission = In_Transmission3_g170463;
				Data3_g170463.Thickness = In_Thickness3_g170463;
				Data3_g170463.Diffusion = In_Diffusion3_g170463;
				Data3_g170463.Depth = In_Depth3_g170463;
				}
				TVEVisualData Data4_g170471 = Data3_g170463;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				float Out_Depth4_g170471 = 0;
				{
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_AlbedoRaw4_g170471 = Data4_g170471.AlbedoRaw;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				Out_Depth4_g170471= Data4_g170471.Depth;
				}
				half3 Visual_Albedo127_g170470 = Out_Albedo4_g170471;
				float4 vertexToFrag24_g170409 = packedInput.ase_texcoord7;
				half4 Interp_Data1036 = vertexToFrag24_g170409;
				float clampResult208_g170470 = clamp( (Interp_Data1036).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170470 = ( Visual_Albedo127_g170470 + ( ( Visual_Albedo127_g170470 * Visual_Albedo127_g170470 * 200.0 * _motion_highlight_color ) * clampResult208_g170470 ) );
				#else
				float3 staticSwitch214_g170470 = Visual_Albedo127_g170470;
				#endif
				half3 Final_Albedo160_g170470 = staticSwitch214_g170470;
				float3 In_Albedo3_g170472 = Final_Albedo160_g170470;
				float3 In_AlbedoRaw3_g170472 = Out_AlbedoRaw4_g170471;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 In_Emissive3_g170472 = Out_Emissive4_g170471;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float In_MultiMask3_g170472 = Out_MultiMask4_g170471;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				float In_Depth3_g170472 = Out_Depth4_g170471;
				{
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.AlbedoRaw = In_AlbedoRaw3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				Data3_g170472.Depth = In_Depth3_g170472;
				}
				TVEVisualData Data4_g170474 = Data3_g170472;
				float Out_Dummy4_g170474 = 0;
				float3 Out_Albedo4_g170474 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170474 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170474 = float2( 0,0 );
				float3 Out_NormalWS4_g170474 = float3( 0,0,0 );
				float4 Out_Shader4_g170474 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170474 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170474 = 0;
				float Out_Grayscale4_g170474 = 0;
				float Out_Luminosity4_g170474 = 0;
				float Out_AlphaClip4_g170474 = 0;
				float Out_AlphaFade4_g170474 = 0;
				float3 Out_Translucency4_g170474 = float3( 0,0,0 );
				float Out_Transmission4_g170474 = 0;
				float Out_Thickness4_g170474 = 0;
				float Out_Diffusion4_g170474 = 0;
				float Out_Depth4_g170474 = 0;
				{
				Out_Dummy4_g170474 = Data4_g170474.Dummy;
				Out_Albedo4_g170474 = Data4_g170474.Albedo;
				Out_AlbedoRaw4_g170474 = Data4_g170474.AlbedoRaw;
				Out_NormalTS4_g170474 = Data4_g170474.NormalTS;
				Out_NormalWS4_g170474 = Data4_g170474.NormalWS;
				Out_Shader4_g170474 = Data4_g170474.Shader;
				Out_Emissive4_g170474= Data4_g170474.Emissive;
				Out_MultiMask4_g170474 = Data4_g170474.MultiMask;
				Out_Grayscale4_g170474 = Data4_g170474.Grayscale;
				Out_Luminosity4_g170474= Data4_g170474.Luminosity;
				Out_AlphaClip4_g170474 = Data4_g170474.AlphaClip;
				Out_AlphaFade4_g170474 = Data4_g170474.AlphaFade;
				Out_Translucency4_g170474 = Data4_g170474.Translucency;
				Out_Transmission4_g170474 = Data4_g170474.Transmission;
				Out_Thickness4_g170474 = Data4_g170474.Thickness;
				Out_Diffusion4_g170474 = Data4_g170474.Diffusion;
				Out_Depth4_g170474= Data4_g170474.Depth;
				}
				half3 Visual_Albedo127_g170473 = Out_Albedo4_g170474;
				float3 temp_output_622_0_g170473 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170477) = _OverlayAlbedoTex;
				float localFilterTexture19_g170483 = ( 0.0 );
				SamplerState SS19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170483 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170483 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170483 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170483 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170483 = SamplerDefault19_g170483;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170483 = SamplerDefault19_g170483;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170483 = SamplerPoint19_g170483;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170483 = SamplerLow19_g170483;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170483 = SamplerMedium19_g170483;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170483 = SamplerHigh19_g170483;
				#endif
				}
				SamplerState Sampler238_g170477 = SS19_g170483;
				float4 temp_output_6_0_g170480 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170480 = ( temp_output_6_0_g170480 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170480 = temp_output_6_0_g170480;
				#endif
				half4 Overlay_Coords639_g170473 = staticSwitch14_g170480;
				float4 temp_output_37_0_g170477 = Overlay_Coords639_g170473;
				half4 Coords238_g170477 = temp_output_37_0_g170477;
				TVEModelData Data15_g170484 = Data16_g156877;
				float Out_Dummy15_g170484 = 0;
				float3 Out_PositionWS15_g170484 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170484 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170484 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170484 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170484 = float3( 0,0,0 );
				float4 Out_VertexData15_g170484 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170484 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170484 = Data15_g170484.Dummy;
				Out_PositionWS15_g170484 = Data15_g170484.PositionWS;
				Out_PositionWO15_g170484 = Data15_g170484.PositionWO;
				Out_PivotWS15_g170484 = Data15_g170484.PivotWS;
				Out_PivotWO15_g170484 = Data15_g170484.PivotWO;
				Out_NormalWS15_g170484 = Data15_g170484.NormalWS;
				Out_ViewDirWS15_g170484 = Data15_g170484.ViewDirWS;
				Out_VertexData15_g170484 = Data15_g170484.VertexData;
				Out_BoundsData15_g170484 = Data15_g170484.BoundsData;
				}
				half3 Model_PositionWO602_g170473 = Out_PositionWO15_g170484;
				float3 temp_output_279_0_g170477 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170477 = temp_output_279_0_g170477;
				half4 localSamplePlanar2D238_g170477 = SamplePlanar2D( Texture238_g170477 , Sampler238_g170477 , Coords238_g170477 , WorldPosition238_g170477 );
				TEXTURE2D(Texture246_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170477 = SS19_g170483;
				half4 Coords246_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition246_g170477 = temp_output_279_0_g170477;
				half3 Model_NormalWS712_g170473 = Out_NormalWS15_g170484;
				float3 temp_output_280_0_g170477 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170477 = temp_output_280_0_g170477;
				half4 localSamplePlanar3D246_g170477 = SamplePlanar3D( Texture246_g170477 , Sampler246_g170477 , Coords246_g170477 , WorldPosition246_g170477 , WorldNormal246_g170477 );
				TEXTURE2D(Texture234_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170477 = SS19_g170483;
				float4 Coords234_g170477 = temp_output_37_0_g170477;
				float3 WorldPosition234_g170477 = temp_output_279_0_g170477;
				float4 localSampleStochastic2D234_g170477 = SampleStochastic2D( Texture234_g170477 , Sampler234_g170477 , Coords234_g170477 , WorldPosition234_g170477 );
				TEXTURE2D(Texture263_g170477) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170477 = SS19_g170483;
				half4 Coords263_g170477 = temp_output_37_0_g170477;
				half3 WorldPosition263_g170477 = temp_output_279_0_g170477;
				half3 WorldNormal263_g170477 = temp_output_280_0_g170477;
				half4 localSampleStochastic3D263_g170477 = SampleStochastic3D( Texture263_g170477 , Sampler263_g170477 , Coords263_g170477 , WorldPosition263_g170477 , WorldNormal263_g170477 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170473 = localSamplePlanar3D246_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170473 = localSampleStochastic2D234_g170477;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170473 = localSampleStochastic3D263_g170477;
				#else
				float4 staticSwitch676_g170473 = localSamplePlanar2D238_g170477;
				#endif
				half3 Overlay_Albedo526_g170473 = (staticSwitch676_g170473).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170473 = ( temp_output_622_0_g170473 * Overlay_Albedo526_g170473 );
				#else
				float3 staticSwitch578_g170473 = temp_output_622_0_g170473;
				#endif
				float3 temp_output_6_0_g170490 = staticSwitch578_g170473;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				float3 temp_output_739_21_g170473 = Out_NormalWS4_g170474;
				half3 Visual_NormalWS749_g170473 = temp_output_739_21_g170473;
				float clampResult17_g170487 = clamp( saturate( (Visual_NormalWS749_g170473).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170493 = _OverlayProjRemap.x;
				float temp_output_9_0_g170493 = ( clampResult17_g170487 - temp_output_7_0_g170493 );
				float lerpResult842_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170493 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170473 = lerpResult842_g170473;
				float temp_output_739_15_g170473 = Out_Luminosity4_g170474;
				half Visual_Luminosity654_g170473 = temp_output_739_15_g170473;
				float clampResult17_g170488 = clamp( Visual_Luminosity654_g170473 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170492 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170492 = ( clampResult17_g170488 - temp_output_7_0_g170492 );
				float lerpResult587_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170492 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170473 = lerpResult587_g170473;
				half4 Model_VertexMasks791_g170473 = Out_VertexData15_g170484;
				float4 break792_g170473 = Model_VertexMasks791_g170473;
				float4 break33_g170485 = _overlay_vert_mode;
				float temp_output_30_0_g170485 = ( break792_g170473.x * break33_g170485.x );
				float temp_output_29_0_g170485 = ( break792_g170473.y * break33_g170485.y );
				float temp_output_31_0_g170485 = ( break792_g170473.z * break33_g170485.z );
				float temp_output_28_0_g170485 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 + temp_output_31_0_g170485 + ( break792_g170473.w * break33_g170485.w ) );
				float clampResult17_g170486 = clamp( temp_output_28_0_g170485 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170494 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170494 = ( clampResult17_g170486 - temp_output_7_0_g170494 );
				float lerpResult879_g170473 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170494 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170489 = lerpResult879_g170473;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170489 = ( temp_output_6_0_g170489 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170489 = temp_output_6_0_g170489;
				#endif
				half Overlay_VertMask801_g170473 = staticSwitch14_g170489;
				float lerpResult920_g170473 = lerp( 1.0 , ( TVE_AtmoParams.z * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170473 = lerpResult920_g170473;
				float temp_output_7_0_g170495 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170495 = ( ( _OverlayIntensityValue * Overlay_MaskProj457_g170473 * Overlay_MaskLuma438_g170473 * Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ) - temp_output_7_0_g170495 );
				half Overlay_Mask494_g170473 = saturate( ( ( temp_output_9_0_g170495 * _OverlayBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult467_g170473 = lerp( Visual_Albedo127_g170473 , staticSwitch14_g170490 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170473 = lerpResult467_g170473;
				#else
				float3 staticSwitch577_g170473 = Visual_Albedo127_g170473;
				#endif
				half3 Final_Albedo493_g170473 = staticSwitch577_g170473;
				float3 In_Albedo3_g170476 = Final_Albedo493_g170473;
				float3 In_AlbedoRaw3_g170476 = Out_AlbedoRaw4_g170474;
				half2 Visual_NormalTS535_g170473 = Out_NormalTS4_g170474;
				TEXTURE2D(Texture238_g170481) = _OverlayNormalTex;
				float localFilterTexture29_g170482 = ( 0.0 );
				SamplerState SS29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170482 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170482 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170482 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170482 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170482 = SamplerDefault29_g170482;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170482 = SamplerDefault29_g170482;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170482 = SamplerPoint29_g170482;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170482 = SamplerLow29_g170482;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170482 = SamplerMedium29_g170482;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170482 = SamplerHigh29_g170482;
				#endif
				}
				SamplerState Sampler238_g170481 = SS29_g170482;
				float4 temp_output_37_0_g170481 = Overlay_Coords639_g170473;
				half4 Coords238_g170481 = temp_output_37_0_g170481;
				float3 temp_output_279_0_g170481 = Model_PositionWO602_g170473;
				half3 WorldPosition238_g170481 = temp_output_279_0_g170481;
				half4 localSamplePlanar2D238_g170481 = SamplePlanar2D( Texture238_g170481 , Sampler238_g170481 , Coords238_g170481 , WorldPosition238_g170481 );
				TEXTURE2D(Texture246_g170481) = _OverlayNormalTex;
				SamplerState Sampler246_g170481 = SS29_g170482;
				half4 Coords246_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition246_g170481 = temp_output_279_0_g170481;
				float3 temp_output_280_0_g170481 = Model_NormalWS712_g170473;
				half3 WorldNormal246_g170481 = temp_output_280_0_g170481;
				half4 localSamplePlanar3D246_g170481 = SamplePlanar3D( Texture246_g170481 , Sampler246_g170481 , Coords246_g170481 , WorldPosition246_g170481 , WorldNormal246_g170481 );
				TEXTURE2D(Texture234_g170481) = _OverlayNormalTex;
				SamplerState Sampler234_g170481 = SS29_g170482;
				float4 Coords234_g170481 = temp_output_37_0_g170481;
				float3 WorldPosition234_g170481 = temp_output_279_0_g170481;
				float4 localSampleStochastic2D234_g170481 = SampleStochastic2D( Texture234_g170481 , Sampler234_g170481 , Coords234_g170481 , WorldPosition234_g170481 );
				TEXTURE2D(Texture263_g170481) = _OverlayNormalTex;
				SamplerState Sampler263_g170481 = SS29_g170482;
				half4 Coords263_g170481 = temp_output_37_0_g170481;
				half3 WorldPosition263_g170481 = temp_output_279_0_g170481;
				half3 WorldNormal263_g170481 = temp_output_280_0_g170481;
				half4 localSampleStochastic3D263_g170481 = SampleStochastic3D( Texture263_g170481 , Sampler263_g170481 , Coords263_g170481 , WorldPosition263_g170481 , WorldNormal263_g170481 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170473 = localSamplePlanar3D246_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170473 = localSampleStochastic2D234_g170481;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170473 = localSampleStochastic3D263_g170481;
				#else
				float4 staticSwitch686_g170473 = localSamplePlanar2D238_g170481;
				#endif
				half4 Normal_Packed45_g170479 = staticSwitch686_g170473;
				float2 appendResult58_g170479 = (float2(( (Normal_Packed45_g170479).x * (Normal_Packed45_g170479).w ) , (Normal_Packed45_g170479).y));
				half2 Normal_Default50_g170479 = appendResult58_g170479;
				half2 Normal_ASTC41_g170479 = (Normal_Packed45_g170479).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170479 = Normal_ASTC41_g170479;
				#else
				float2 staticSwitch38_g170479 = Normal_Default50_g170479;
				#endif
				half2 Normal_NO_DTX544_g170479 = (Normal_Packed45_g170479).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170479 = Normal_NO_DTX544_g170479;
				#else
				float2 staticSwitch37_g170479 = staticSwitch38_g170479;
				#endif
				half2 Normal_Planar45_g170478 = (staticSwitch37_g170479*2.0 + -1.0);
				float2 break71_g170478 = Normal_Planar45_g170478;
				float3 appendResult72_g170478 = (float3(break71_g170478.x , 0.0 , break71_g170478.y));
				half2 Overlay_Normal528_g170473 = (mul( ase_worldToTangent, appendResult72_g170478 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170473 = Overlay_Normal528_g170473;
				#else
				float2 staticSwitch579_g170473 = Visual_NormalTS535_g170473;
				#endif
				float2 lerpResult551_g170473 = lerp( Visual_NormalTS535_g170473 , ( staticSwitch579_g170473 * _OverlayNormalValue ) , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170473 = lerpResult551_g170473;
				#else
				float2 staticSwitch583_g170473 = Visual_NormalTS535_g170473;
				#endif
				half2 Final_NormalTS499_g170473 = staticSwitch583_g170473;
				float2 In_NormalTS3_g170476 = Final_NormalTS499_g170473;
				float3 In_NormalWS3_g170476 = temp_output_739_21_g170473;
				half4 Visual_Masks536_g170473 = Out_Shader4_g170474;
				float4 appendResult585_g170473 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170473 = lerp( Visual_Masks536_g170473 , appendResult585_g170473 , Overlay_Mask494_g170473);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170473 = lerpResult584_g170473;
				#else
				float4 staticSwitch586_g170473 = Visual_Masks536_g170473;
				#endif
				half4 Final_Masks482_g170473 = staticSwitch586_g170473;
				float4 In_Shader3_g170476 = Final_Masks482_g170473;
				float4 In_Emissive3_g170476 = Out_Emissive4_g170474;
				float temp_output_739_12_g170473 = Out_Grayscale4_g170474;
				float In_Grayscale3_g170476 = temp_output_739_12_g170473;
				float In_Luminosity3_g170476 = temp_output_739_15_g170473;
				float In_MultiMask3_g170476 = Out_MultiMask4_g170474;
				float In_AlphaClip3_g170476 = Out_AlphaClip4_g170474;
				float In_AlphaFade3_g170476 = Out_AlphaFade4_g170474;
				float3 In_Translucency3_g170476 = Out_Translucency4_g170474;
				half Visual_Transmission699_g170473 = Out_Transmission4_g170474;
				float lerpResult746_g170473 = lerp( Visual_Transmission699_g170473 , ( Visual_Transmission699_g170473 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170473 * Overlay_MaskGlobal429_g170473 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170473 = lerpResult746_g170473;
				#else
				float staticSwitch703_g170473 = Visual_Transmission699_g170473;
				#endif
				half Final_Transmission702_g170473 = staticSwitch703_g170473;
				float In_Transmission3_g170476 = Final_Transmission702_g170473;
				float In_Thickness3_g170476 = Out_Thickness4_g170474;
				float In_Diffusion3_g170476 = Out_Diffusion4_g170474;
				float In_Depth3_g170476 = Out_Depth4_g170474;
				{
				Data3_g170476.Dummy = In_Dummy3_g170476;
				Data3_g170476.Albedo = In_Albedo3_g170476;
				Data3_g170476.AlbedoRaw = In_AlbedoRaw3_g170476;
				Data3_g170476.NormalTS = In_NormalTS3_g170476;
				Data3_g170476.NormalWS = In_NormalWS3_g170476;
				Data3_g170476.Shader = In_Shader3_g170476;
				Data3_g170476.Emissive= In_Emissive3_g170476;
				Data3_g170476.MultiMask = In_MultiMask3_g170476;
				Data3_g170476.Grayscale = In_Grayscale3_g170476;
				Data3_g170476.Luminosity = In_Luminosity3_g170476;
				Data3_g170476.AlphaClip = In_AlphaClip3_g170476;
				Data3_g170476.AlphaFade = In_AlphaFade3_g170476;
				Data3_g170476.Translucency = In_Translucency3_g170476;
				Data3_g170476.Transmission = In_Transmission3_g170476;
				Data3_g170476.Thickness = In_Thickness3_g170476;
				Data3_g170476.Diffusion = In_Diffusion3_g170476;
				Data3_g170476.Depth = In_Depth3_g170476;
				}
				TVEVisualData Data4_g170531 = Data3_g170476;
				float Out_Dummy4_g170531 = 0;
				float3 Out_Albedo4_g170531 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170531 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170531 = float2( 0,0 );
				float3 Out_NormalWS4_g170531 = float3( 0,0,0 );
				float4 Out_Shader4_g170531 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170531 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170531 = 0;
				float Out_Grayscale4_g170531 = 0;
				float Out_Luminosity4_g170531 = 0;
				float Out_AlphaClip4_g170531 = 0;
				float Out_AlphaFade4_g170531 = 0;
				float3 Out_Translucency4_g170531 = float3( 0,0,0 );
				float Out_Transmission4_g170531 = 0;
				float Out_Thickness4_g170531 = 0;
				float Out_Diffusion4_g170531 = 0;
				float Out_Depth4_g170531 = 0;
				{
				Out_Dummy4_g170531 = Data4_g170531.Dummy;
				Out_Albedo4_g170531 = Data4_g170531.Albedo;
				Out_AlbedoRaw4_g170531 = Data4_g170531.AlbedoRaw;
				Out_NormalTS4_g170531 = Data4_g170531.NormalTS;
				Out_NormalWS4_g170531 = Data4_g170531.NormalWS;
				Out_Shader4_g170531 = Data4_g170531.Shader;
				Out_Emissive4_g170531= Data4_g170531.Emissive;
				Out_MultiMask4_g170531 = Data4_g170531.MultiMask;
				Out_Grayscale4_g170531 = Data4_g170531.Grayscale;
				Out_Luminosity4_g170531= Data4_g170531.Luminosity;
				Out_AlphaClip4_g170531 = Data4_g170531.AlphaClip;
				Out_AlphaFade4_g170531 = Data4_g170531.AlphaFade;
				Out_Translucency4_g170531 = Data4_g170531.Translucency;
				Out_Transmission4_g170531 = Data4_g170531.Transmission;
				Out_Thickness4_g170531 = Data4_g170531.Thickness;
				Out_Diffusion4_g170531 = Data4_g170531.Diffusion;
				Out_Depth4_g170531= Data4_g170531.Depth;
				}
				float3 temp_output_297_0_g170527 = Out_Albedo4_g170531;
				float3 In_Albedo3_g170542 = temp_output_297_0_g170527;
				float3 temp_output_297_23_g170527 = Out_AlbedoRaw4_g170531;
				float3 In_AlbedoRaw3_g170542 = temp_output_297_23_g170527;
				float2 In_NormalTS3_g170542 = Out_NormalTS4_g170531;
				float3 In_NormalWS3_g170542 = Out_NormalWS4_g170531;
				float4 In_Shader3_g170542 = Out_Shader4_g170531;
				float4 temp_cast_7 = (0.0).xxxx;
				half4 Visual_Emissive255_g170527 = Out_Emissive4_g170531;
				TVEModelData Data15_g170532 = Data16_g156877;
				float Out_Dummy15_g170532 = 0;
				float3 Out_PositionWS15_g170532 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170532 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170532 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170532 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170532 = float3( 0,0,0 );
				float4 Out_VertexData15_g170532 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170532 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170532 = Data15_g170532.Dummy;
				Out_PositionWS15_g170532 = Data15_g170532.PositionWS;
				Out_PositionWO15_g170532 = Data15_g170532.PositionWO;
				Out_PivotWS15_g170532 = Data15_g170532.PivotWS;
				Out_PivotWO15_g170532 = Data15_g170532.PivotWO;
				Out_NormalWS15_g170532 = Data15_g170532.NormalWS;
				Out_ViewDirWS15_g170532 = Data15_g170532.ViewDirWS;
				Out_VertexData15_g170532 = Data15_g170532.VertexData;
				Out_BoundsData15_g170532 = Data15_g170532.BoundsData;
				}
				half4 Model_VertexMasks216_g170527 = Out_VertexData15_g170532;
				float4 break251_g170527 = Model_VertexMasks216_g170527;
				float4 break33_g170537 = _emissive_vert_mode;
				float temp_output_30_0_g170537 = ( break251_g170527.x * break33_g170537.x );
				float temp_output_29_0_g170537 = ( break251_g170527.y * break33_g170537.y );
				float temp_output_31_0_g170537 = ( break251_g170527.z * break33_g170537.z );
				float temp_output_28_0_g170537 = ( temp_output_30_0_g170537 + temp_output_29_0_g170537 + temp_output_31_0_g170537 + ( break251_g170527.w * break33_g170537.w ) );
				float clampResult17_g170536 = clamp( temp_output_28_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170540 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170540 = ( clampResult17_g170536 - temp_output_7_0_g170540 );
				float lerpResult303_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170540 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170539 = lerpResult303_g170527;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170539 = ( temp_output_6_0_g170539 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170539 = temp_output_6_0_g170539;
				#endif
				half Emissive_MeshMask221_g170527 = staticSwitch14_g170539;
				TEXTURE2D(Texture276_g170529) = _EmissiveMaskTex;
				SamplerState Sampler276_g170529 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170530 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170530 = ( temp_output_6_0_g170530 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170530 = temp_output_6_0_g170530;
				#endif
				half4 Emissive_Coords167_g170527 = staticSwitch14_g170530;
				float4 temp_output_37_0_g170529 = Emissive_Coords167_g170527;
				half4 Coords276_g170529 = temp_output_37_0_g170529;
				half2 TexCoord276_g170529 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170529 = SampleMain( Texture276_g170529 , Sampler276_g170529 , Coords276_g170529 , TexCoord276_g170529 );
				TEXTURE2D(Texture275_g170529) = _EmissiveMaskTex;
				SamplerState Sampler275_g170529 = sampler_Linear_Repeat;
				half4 Coords275_g170529 = temp_output_37_0_g170529;
				half2 TexCoord275_g170529 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170529 = SampleExtra( Texture275_g170529 , Sampler275_g170529 , Coords275_g170529 , TexCoord275_g170529 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170527 = localSampleExtra275_g170529;
				#else
				float4 staticSwitch176_g170527 = localSampleMain276_g170529;
				#endif
				half4 Emissive_MaskTex201_g170527 = staticSwitch176_g170527;
				float clampResult17_g170538 = clamp( (Emissive_MaskTex201_g170527).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170541 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170541 = ( clampResult17_g170538 - temp_output_7_0_g170541 );
				float lerpResult302_g170527 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170541 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170527 = lerpResult302_g170527;
				float temp_output_279_0_g170527 = ( Emissive_MeshMask221_g170527 * Emissive_Mask103_g170527 );
				float3 appendResult293_g170527 = (float3(temp_output_279_0_g170527 , temp_output_279_0_g170527 , temp_output_279_0_g170527));
				half3 Local_EmissiveColor278_g170527 = appendResult293_g170527;
				float3 temp_output_316_0_g170527 = (TVE_GlowParams).xyz;
				float3 lerpResult299_g170527 = lerp( float3( 1,1,1 ) , temp_output_316_0_g170527 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170527 = lerpResult299_g170527;
				half3 Visual_AlbedoRaw306_g170527 = temp_output_297_23_g170527;
				float3 lerpResult307_g170527 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170527 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170527 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170527 * lerpResult307_g170527 );
				half3 Emissive_Blend260_g170527 = ( ( (Visual_Emissive255_g170527).xyz * Local_EmissiveColor278_g170527 ) * Local_EmissiveValue88_g170527 );
				float3 temp_output_3_0_g170533 = Emissive_Blend260_g170527;
				float temp_output_15_0_g170533 = _emissive_power_value;
				float3 hdEmission22_g170533 = ASEGetEmissionHDRColor(temp_output_3_0_g170533,temp_output_15_0_g170533,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170527 = temp_output_279_0_g170527;
				float4 appendResult295_g170527 = (float4(hdEmission22_g170533 , Local_EmissiveMask294_g170527));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170527 = appendResult295_g170527;
				#else
				float4 staticSwitch129_g170527 = temp_cast_7;
				#endif
				half4 Final_Emissive184_g170527 = staticSwitch129_g170527;
				float4 In_Emissive3_g170542 = Final_Emissive184_g170527;
				float In_Grayscale3_g170542 = Out_Grayscale4_g170531;
				float In_Luminosity3_g170542 = Out_Luminosity4_g170531;
				float temp_output_297_11_g170527 = Out_MultiMask4_g170531;
				float In_MultiMask3_g170542 = temp_output_297_11_g170527;
				float In_AlphaClip3_g170542 = Out_AlphaClip4_g170531;
				float In_AlphaFade3_g170542 = Out_AlphaFade4_g170531;
				float3 In_Translucency3_g170542 = Out_Translucency4_g170531;
				float In_Transmission3_g170542 = Out_Transmission4_g170531;
				float In_Thickness3_g170542 = Out_Thickness4_g170531;
				float In_Diffusion3_g170542 = Out_Diffusion4_g170531;
				float In_Depth3_g170542 = Out_Depth4_g170531;
				{
				Data3_g170542.Dummy = In_Dummy3_g170542;
				Data3_g170542.Albedo = In_Albedo3_g170542;
				Data3_g170542.AlbedoRaw = In_AlbedoRaw3_g170542;
				Data3_g170542.NormalTS = In_NormalTS3_g170542;
				Data3_g170542.NormalWS = In_NormalWS3_g170542;
				Data3_g170542.Shader = In_Shader3_g170542;
				Data3_g170542.Emissive= In_Emissive3_g170542;
				Data3_g170542.MultiMask = In_MultiMask3_g170542;
				Data3_g170542.Grayscale = In_Grayscale3_g170542;
				Data3_g170542.Luminosity = In_Luminosity3_g170542;
				Data3_g170542.AlphaClip = In_AlphaClip3_g170542;
				Data3_g170542.AlphaFade = In_AlphaFade3_g170542;
				Data3_g170542.Translucency = In_Translucency3_g170542;
				Data3_g170542.Transmission = In_Transmission3_g170542;
				Data3_g170542.Thickness = In_Thickness3_g170542;
				Data3_g170542.Diffusion = In_Diffusion3_g170542;
				Data3_g170542.Depth = In_Depth3_g170542;
				}
				TVEVisualData Data4_g170621 = Data3_g170542;
				float Out_Dummy4_g170621 = 0;
				float3 Out_Albedo4_g170621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170621 = float2( 0,0 );
				float3 Out_NormalWS4_g170621 = float3( 0,0,0 );
				float4 Out_Shader4_g170621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170621 = 0;
				float Out_Grayscale4_g170621 = 0;
				float Out_Luminosity4_g170621 = 0;
				float Out_AlphaClip4_g170621 = 0;
				float Out_AlphaFade4_g170621 = 0;
				float3 Out_Translucency4_g170621 = float3( 0,0,0 );
				float Out_Transmission4_g170621 = 0;
				float Out_Thickness4_g170621 = 0;
				float Out_Diffusion4_g170621 = 0;
				float Out_Depth4_g170621 = 0;
				{
				Out_Dummy4_g170621 = Data4_g170621.Dummy;
				Out_Albedo4_g170621 = Data4_g170621.Albedo;
				Out_AlbedoRaw4_g170621 = Data4_g170621.AlbedoRaw;
				Out_NormalTS4_g170621 = Data4_g170621.NormalTS;
				Out_NormalWS4_g170621 = Data4_g170621.NormalWS;
				Out_Shader4_g170621 = Data4_g170621.Shader;
				Out_Emissive4_g170621= Data4_g170621.Emissive;
				Out_MultiMask4_g170621 = Data4_g170621.MultiMask;
				Out_Grayscale4_g170621 = Data4_g170621.Grayscale;
				Out_Luminosity4_g170621= Data4_g170621.Luminosity;
				Out_AlphaClip4_g170621 = Data4_g170621.AlphaClip;
				Out_AlphaFade4_g170621 = Data4_g170621.AlphaFade;
				Out_Translucency4_g170621 = Data4_g170621.Translucency;
				Out_Transmission4_g170621 = Data4_g170621.Transmission;
				Out_Thickness4_g170621 = Data4_g170621.Thickness;
				Out_Diffusion4_g170621 = Data4_g170621.Diffusion;
				Out_Depth4_g170621= Data4_g170621.Depth;
				}
				half3 Visual_Albedo199_g170620 = Out_Albedo4_g170621;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170620 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170620 );
				half Visual_Transmission138_g170620 = Out_Transmission4_g170621;
				half Subsurface_Value268_g170620 = _SubsurfaceIntensityValue;
				float lerpResult403_g170620 = lerp( 1.0 , TVE_GlowParams.w , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170620 = lerpResult403_g170620;
				float temp_output_301_11_g170620 = Out_MultiMask4_g170621;
				half Visual_MultiMask292_g170620 = temp_output_301_11_g170620;
				float lerpResult293_g170620 = lerp( 1.0 , Visual_MultiMask292_g170620 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170620 = lerpResult293_g170620;
				half Custom_Mask363_g170620 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170620 = ( Visual_Transmission138_g170620 * Subsurface_Value268_g170620 * Subsurface_GlobalMask369_g170620 * Subsurface_MultiMask296_g170620 * Custom_Mask363_g170620 );
				#else
				float staticSwitch345_g170620 = 0.0;
				#endif
				half Final_Transmission269_g170620 = staticSwitch345_g170620;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170620 = ( Subsurface_Color264_g170620 * Final_Transmission269_g170620 * 10.0 );
				#else
				float3 staticSwitch348_g170620 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170620 = staticSwitch348_g170620;
				TVEModelData Data15_g170624 = Data16_g156877;
				float Out_Dummy15_g170624 = 0;
				float3 Out_PositionWS15_g170624 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170624 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170624 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170624 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170624 = float3( 0,0,0 );
				float4 Out_VertexData15_g170624 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170624 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170624 = Data15_g170624.Dummy;
				Out_PositionWS15_g170624 = Data15_g170624.PositionWS;
				Out_PositionWO15_g170624 = Data15_g170624.PositionWO;
				Out_PivotWS15_g170624 = Data15_g170624.PivotWS;
				Out_PivotWO15_g170624 = Data15_g170624.PivotWO;
				Out_NormalWS15_g170624 = Data15_g170624.NormalWS;
				Out_ViewDirWS15_g170624 = Data15_g170624.ViewDirWS;
				Out_VertexData15_g170624 = Data15_g170624.VertexData;
				Out_BoundsData15_g170624 = Data15_g170624.BoundsData;
				}
				half3 Model_ViewDirWS392_g170620 = Out_ViewDirWS15_g170624;
				float dotResult324_g170620 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170620 );
				float saferPower323_g170620 = abs( saturate( dotResult324_g170620 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170620 = 0.0;
				#else
				float staticSwitch330_g170620 = ( pow( saferPower323_g170620 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170620 = staticSwitch330_g170620;
				float3 temp_output_6_0_g170625 = ( Final_Translucency254_g170620 * Mask_Subsurface_View320_g170620 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170625 = ( temp_output_6_0_g170625 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170625 = temp_output_6_0_g170625;
				#endif
				half3 Subsurface_Approximation333_g170620 = staticSwitch14_g170625;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170620 = ( Visual_Albedo199_g170620 + Subsurface_Approximation333_g170620 );
				#else
				float3 staticSwitch353_g170620 = Visual_Albedo199_g170620;
				#endif
				half3 Final_Albedo312_g170620 = staticSwitch353_g170620;
				float3 In_Albedo3_g170622 = Final_Albedo312_g170620;
				float3 In_AlbedoRaw3_g170622 = Out_AlbedoRaw4_g170621;
				float2 In_NormalTS3_g170622 = Out_NormalTS4_g170621;
				float3 In_NormalWS3_g170622 = Out_NormalWS4_g170621;
				float4 In_Shader3_g170622 = Out_Shader4_g170621;
				float4 In_Emissive3_g170622 = Out_Emissive4_g170621;
				float In_Grayscale3_g170622 = Out_Grayscale4_g170621;
				float In_Luminosity3_g170622 = Out_Luminosity4_g170621;
				float In_MultiMask3_g170622 = temp_output_301_11_g170620;
				float In_AlphaClip3_g170622 = Out_AlphaClip4_g170621;
				float In_AlphaFade3_g170622 = Out_AlphaFade4_g170621;
				float3 In_Translucency3_g170622 = Final_Translucency254_g170620;
				float In_Transmission3_g170622 = Final_Transmission269_g170620;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170620 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170620 = 1.0;
				#endif
				half Final_Thickness275_g170620 = staticSwitch351_g170620;
				float In_Thickness3_g170622 = Final_Thickness275_g170620;
				float Final_Diffusion340_g170620 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170622 = Final_Diffusion340_g170620;
				float In_Depth3_g170622 = Out_Depth4_g170621;
				{
				Data3_g170622.Dummy = In_Dummy3_g170622;
				Data3_g170622.Albedo = In_Albedo3_g170622;
				Data3_g170622.AlbedoRaw = In_AlbedoRaw3_g170622;
				Data3_g170622.NormalTS = In_NormalTS3_g170622;
				Data3_g170622.NormalWS = In_NormalWS3_g170622;
				Data3_g170622.Shader = In_Shader3_g170622;
				Data3_g170622.Emissive= In_Emissive3_g170622;
				Data3_g170622.MultiMask = In_MultiMask3_g170622;
				Data3_g170622.Grayscale = In_Grayscale3_g170622;
				Data3_g170622.Luminosity = In_Luminosity3_g170622;
				Data3_g170622.AlphaClip = In_AlphaClip3_g170622;
				Data3_g170622.AlphaFade = In_AlphaFade3_g170622;
				Data3_g170622.Translucency = In_Translucency3_g170622;
				Data3_g170622.Transmission = In_Transmission3_g170622;
				Data3_g170622.Thickness = In_Thickness3_g170622;
				Data3_g170622.Diffusion = In_Diffusion3_g170622;
				Data3_g170622.Depth = In_Depth3_g170622;
				}
				TVEVisualData Data4_g170633 = Data3_g170622;
				float Out_Dummy4_g170633 = 0;
				float3 Out_Albedo4_g170633 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170633 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170633 = float2( 0,0 );
				float3 Out_NormalWS4_g170633 = float3( 0,0,0 );
				float4 Out_Shader4_g170633 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170633 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170633 = 0;
				float Out_Grayscale4_g170633 = 0;
				float Out_Luminosity4_g170633 = 0;
				float Out_AlphaClip4_g170633 = 0;
				float Out_AlphaFade4_g170633 = 0;
				float3 Out_Translucency4_g170633 = float3( 0,0,0 );
				float Out_Transmission4_g170633 = 0;
				float Out_Thickness4_g170633 = 0;
				float Out_Diffusion4_g170633 = 0;
				float Out_Depth4_g170633 = 0;
				{
				Out_Dummy4_g170633 = Data4_g170633.Dummy;
				Out_Albedo4_g170633 = Data4_g170633.Albedo;
				Out_AlbedoRaw4_g170633 = Data4_g170633.AlbedoRaw;
				Out_NormalTS4_g170633 = Data4_g170633.NormalTS;
				Out_NormalWS4_g170633 = Data4_g170633.NormalWS;
				Out_Shader4_g170633 = Data4_g170633.Shader;
				Out_Emissive4_g170633= Data4_g170633.Emissive;
				Out_MultiMask4_g170633 = Data4_g170633.MultiMask;
				Out_Grayscale4_g170633 = Data4_g170633.Grayscale;
				Out_Luminosity4_g170633= Data4_g170633.Luminosity;
				Out_AlphaClip4_g170633 = Data4_g170633.AlphaClip;
				Out_AlphaFade4_g170633 = Data4_g170633.AlphaFade;
				Out_Translucency4_g170633 = Data4_g170633.Translucency;
				Out_Transmission4_g170633 = Data4_g170633.Transmission;
				Out_Thickness4_g170633 = Data4_g170633.Thickness;
				Out_Diffusion4_g170633 = Data4_g170633.Diffusion;
				Out_Depth4_g170633= Data4_g170633.Depth;
				}
				float temp_output_3_0_g170638 = Out_AlphaClip4_g170633;
				float Alpha21_g170638 = temp_output_3_0_g170638;
				float temp_output_15_0_g170638 = 0.0;
				float Treshold21_g170638 = temp_output_15_0_g170638;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170638 - Treshold21_g170638);
				#endif
				#endif
				}
				

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170638 * Out_AlphaFade4_g170633 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {
            Name "FullScreenDebug"
            Tags
			{
				"LightMode" = "FullScreenDebug"
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal = input.normalOS;
				output.ObjectSpaceTangent = input.tangentOS.xyz;
				output.ObjectSpacePosition = input.positionOS;

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TheVisualEngineLite.MaterialGUI"
	
	Fallback Off
}
/*ASEBEGIN
Version=19802
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1013;-11392,-384;Inherit;False;Block Model;46;;156872;7ad7765e793a6714babedee0033c36e9;14,240,1,290,1,291,1,289,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1014;-11072,-384;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1016;-10624,-384;Inherit;False;1014;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1019;-10368,-384;Inherit;False;Block Pivots Sub;-1;;157405;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1018;-11072,-320;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1020;-7040,-384;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1022;-9984,-384;Inherit;False;Block Lite Motion;482;;170256;d8687cf5f6a8faa449e82fd2b678fe12;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1862
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1023;-6784,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1025;-6784,-384;Inherit;False;Block Main;98;;170319;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1026;-9536,-256;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1027;-6400,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1030;-8064,-384;Inherit;False;1026;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1029;-6400,-384;Inherit;False;Block Layer;122;;170340;5f6a6b9e0b5515744bf8e48a9ccead1b;13,986,1,709,1,726,1,748,1,1070,1,1066,1,1048,1,1045,0,1053,1,1035,1,1055,1,1051,1,1008,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1031;-6016,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1033;-7808,-384;Inherit;False;Block Interp;-1;;170409;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1032;-6016,-384;Inherit;False;Block Detail;174;;170410;a5b52fdec7b855a4fba859a90e837892;13,990,1,709,1,726,1,748,1,1073,1,1083,1,1062,1,1057,0,1067,1,1048,1,1069,1,1065,1,1013,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1034;-5632,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1035;-5632,-384;Inherit;False;Block Occlusion;223;;170450;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1036;-7488,-384;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1037;-5248,-384;Inherit;False;Block Gradient;235;;170460;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1038;-5248,-256;Inherit;False;1036;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1040;-4864,-384;Inherit;False;Block Highlight;0;;170470;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1041;-4864,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1043;-4480,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1044;-4480,-384;Inherit;False;Block Lite Overlay;317;;170473;df6d6bbf01172a34387d93d862d3d156;8,813,1,821,1,819,1,929,1,923,1,826,1,823,1,828,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1045;-9600,-384;Inherit;False;Block Transform;-1;;170500;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1047;-4096,-256;Inherit;False;1018;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1049;-9216,-384;Inherit;False;Block Lite Normal;526;;170510;d07450326a8fd9045b27c2ea55f72353;1,1681,1;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;966;-2688,-64;Inherit;False;Block Lite Dithering;402;;170519;6e52cef07120daa408f9658182b29574;3,847,1,848,1,855,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;967;-2688,0;Inherit;False;Block Lite Perspective;463;;170520;d4a92d6e6eef32d4f945d10292650e0c;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;968;-2688,64;Inherit;False;Block Lite Size Fade;470;;170521;828b7cb552f180f4193fb67dbaaae0ce;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;969;-2688,-384;Inherit;False;Block Lite Variation;248;;170522;3df1ad26aa7a397488e4d172ec7355ef;0;0;1;COLOR;116
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;970;-2688,-320;Inherit;False;Block Lite Tinting;260;;170523;c2bee839afbcbb7499ebde2af2a2b317;3,352,1,377,0,375,1;0;1;COLOR;204
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;971;-2688,-256;Inherit;False;Block Lite Dryness;287;;170524;d0ad841a44e589843b633cc1b97af190;3,398,1,440,0,438,1;0;1;COLOR;346
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;972;-2688,-128;Inherit;False;Block Lite Cutout;384;;170525;0780bee94024ab547ae8bb1fac250cb1;2,775,1,824,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;965;-2688,-192;Inherit;False;Block Lite Wetness;354;;170526;30361f2d9d7742e4db0b62746ed1affc;6,850,1,893,1,877,1,894,1,873,1,895,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1048;-4096,-384;Inherit;False;Block Emissive;419;;170527;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,0,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1017;-2688,192;Inherit;False;Block Lite Global;58;;170552;3cde0aa66f3d8ec4a9b80a215a26f02b;14,315,0,311,0,317,0,321,0,319,0,323,0,337,1,283,0,285,0,282,0,308,0,276,0,287,0,349,0;1;206;OBJECT;0,0,0,0;False;1;FLOAT;151
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1051;-8832,-384;Inherit;False;Block Pivots Add;-1;;170617;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.SimpleAddOpNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;975;-2304,-384;Inherit;False;9;9;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;8;FLOAT;0;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1050;-3712,-384;Inherit;False;Block Subsurface;443;;170620;d738d295ada6b1f409db6776b5efe789;5,315,1,413,1,411,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1052;-3392,-384;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1053;-8512,-384;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;978;-2112,-384;Half;False;Dummy Data;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;977;-1408,-384;Inherit;False;1052;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;976;-1408,-320;Inherit;False;1053;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;980;-1408,-256;Inherit;False;978;Dummy Data;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;979;-1152,-384;Inherit;False;Block Render;2;;170628;a46c8f81ec84cc34b8c5bbba7c174e1d;0;3;17;OBJECT;;False;19;OBJECT;;False;125;FLOAT;0;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;981;-1232,-768;Half;False;Property;_render_src;_render_src;544;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;982;-1408,-768;Half;False;Property;_render_cull;_render_cull;543;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;2;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;983;-1056,-768;Half;False;Property;_render_dst;_render_dst;545;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;984;-880,-768;Half;False;Property;_render_zw;_render_zw;546;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;985;-704,-768;Half;False;Property;_render_coverage;_render_coverage;547;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;988;-960,-896;Half;False;Property;_IsLiteShader;_IsLiteShader;550;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;991;-1184,-896;Half;False;Property;_IsStandardShader;_IsStandardShader;549;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;992;-1408,-896;Half;False;Property;_IsGeneralShader;_IsGeneralShader;548;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;986;-384,-768;Inherit;False;Base Compile;-1;;170644;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;998;-384,-384;Float;False;True;-1;2;TheVisualEngineLite.MaterialGUI;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit (Lite);28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;35;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;True;True;True;True;0;True;_LightLayersMaskBuffer4;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;40;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;4;638504304526705782;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Normal Space,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Write Depth;0;0;  Depth Offset;0;0;  Conservative;0;0;GPU Instancing;1;0;LOD CrossFade;1;638504304554304421;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504304569891163;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;999;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1000;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1001;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1002;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1003;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1004;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1005;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1006;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1007;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1008;-768,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;1014;0;1013;128
WireConnection;1019;146;1016;0
WireConnection;1018;0;1013;314
WireConnection;1022;146;1019;128
WireConnection;1025;225;1020;0
WireConnection;1026;0;1022;1862
WireConnection;1029;585;1025;106
WireConnection;1029;633;1023;0
WireConnection;1033;22;1030;0
WireConnection;1032;585;1029;552
WireConnection;1032;633;1027;0
WireConnection;1035;144;1032;552
WireConnection;1035;204;1031;0
WireConnection;1036;0;1033;0
WireConnection;1037;144;1035;116
WireConnection;1037;222;1034;0
WireConnection;1040;144;1037;116
WireConnection;1040;212;1038;0
WireConnection;1044;572;1040;116
WireConnection;1044;596;1041;0
WireConnection;1045;146;1022;128
WireConnection;1049;146;1045;128
WireConnection;1048;146;1044;566
WireConnection;1048;148;1043;0
WireConnection;1051;146;1049;128
WireConnection;975;0;969;116
WireConnection;975;1;970;204
WireConnection;975;2;971;346
WireConnection;975;3;965;566
WireConnection;975;4;972;566
WireConnection;975;5;966;566
WireConnection;975;6;967;128
WireConnection;975;7;968;128
WireConnection;975;8;1017;151
WireConnection;1050;146;1048;183
WireConnection;1050;385;1047;0
WireConnection;1052;0;1050;183
WireConnection;1053;0;1051;128
WireConnection;978;0;975;0
WireConnection;979;17;977;0
WireConnection;979;19;976;0
WireConnection;979;125;980;0
WireConnection;998;0;979;21
WireConnection;998;1;979;22
WireConnection;998;5;979;77
WireConnection;998;7;979;27
WireConnection;998;8;979;26
WireConnection;998;6;979;34
WireConnection;998;9;979;28
WireConnection;998;11;979;30
WireConnection;998;12;979;32
WireConnection;998;27;979;33
ASEEND*/
//CHKSM=CDA5EE7D62641758AD80AA2AE75E11AE85C9A825